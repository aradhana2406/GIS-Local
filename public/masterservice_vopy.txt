
package org.apache.ofbiz;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Multipart;
import org.apache.poi.ss.usermodel.IndexedColors;

import java.util.Properties;
import javax.mail.internet.MimeBodyPart;

import javax.mail.Authenticator;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import java.io.File;
//import javax.transaction.Transaction;
import java.util.*;
import java.io.IOException;


import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.ByteBuffer;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.concurrent.Callable;
import java.text.SimpleDateFormat;

import org.apache.ofbiz.base.util.Debug;
import org.apache.ofbiz.base.util.UtilMisc;
import org.apache.ofbiz.base.util.UtilValidate;
import org.apache.ofbiz.entity.Delegator;
import org.apache.ofbiz.entity.GenericDelegator;
import org.apache.ofbiz.entity.GenericEntity;
import org.apache.ofbiz.entity.GenericEntityException;
import org.apache.ofbiz.entity.GenericValue;
import org.apache.ofbiz.entity.condition.EntityCondition;
import org.apache.ofbiz.entity.condition.EntityExpr;
import org.apache.ofbiz.entity.condition.EntityOperator;
import org.apache.ofbiz.entity.transaction.GenericTransactionException;
import org.apache.ofbiz.entity.transaction.TransactionUtil;
import org.apache.ofbiz.entity.util.EntityFindOptions;
import org.apache.ofbiz.entity.util.EntityListIterator;
import org.apache.ofbiz.entity.util.EntityQuery;
import org.apache.ofbiz.entity.util.EntityTypeUtil;
import org.apache.ofbiz.entity.util.EntityUtil;
import org.apache.ofbiz.entity.util.EntityUtilProperties;
import org.apache.ofbiz.service.DispatchContext;
import org.apache.ofbiz.service.GenericServiceException;
import org.apache.ofbiz.service.LocalDispatcher;
import org.apache.ofbiz.service.ServiceContainer;
import org.apache.ofbiz.service.ServiceUtil;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;

import com.mol.util.APIWRDHRMSHelper;

import javolution.util.FastList;
import javolution.util.FastMap;

import org.json.JSONArray;
import org.json.JSONException;

import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.Message.RecipientType;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javolution.util.FastList;
import javolution.util.FastSet;
import org.apache.ofbiz.entity.condition.EntityOperator;
//import net.sf.json.*;
import org.json.JSONObject;
import java.io.PrintWriter;
import org.json.JSONArray;
import org.json.*;

import java.awt.Color;
import java.io.FileOutputStream;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileInputStream;
import org.apache.poi.xssf.usermodel.XSSFFont;
import java.io.File;
import org.apache.poi.ss.usermodel.Cell;
import java.io.FileOutputStream;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;

import java.text.DateFormat;

import org.apache.ofbiz.entity.GenericEntity;
import org.apache.ofbiz.entity.GenericEntityException;

//added for XLS
import java.awt.Color;
import java.io.FileOutputStream;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileInputStream;

import org.apache.poi.xssf.usermodel.XSSFFont;
//end

import org.apache.poi.xssf.usermodel.XSSFFont;

import org.apache.ofbiz.accounting.masterContantSMS;
import org.apache.ofbiz.accounting.masterUIMessage;
import java.util.stream.Collectors;

//end

public class masterServices {
	public static final String module = masterServices.class.getName();
	public static final String resource = "MasterUiLabels";
	public static final String dataSourceId = "GEOPT_GOOGLE";

	public static Map<String, Object> saveDamCheckList(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();


		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String description = (String) context.get("description");
		String componentNo = (String) context.get("componentNo");
		String pointNo = (String) context.get("pointNo");
		String mainCategory = (String) context.get("mainCategory");

		try {
			if (UtilValidate.isNotEmpty(description)) {
				System.out.print("ddddddddddddddddddddddd");

				String damCheckListId = delegator.getNextSeqId("damCheckListMaster", 1);

				GenericValue damCheckListDetails = delegator.makeValue("damCheckListMaster",
						UtilMisc.toMap("damCheckListId", damCheckListId, "mainCategory", mainCategory, "description",
								description, "subComponentNo", pointNo, "componentNo", componentNo, "status", "A"));

				damCheckListDetails.create();
				String sms="Hello";
				successResult.put(masterContantSMS.SUCCESS_MESSAGE, masterUIMessage.getSuccessMessage
		                    (resource,masterContantSMS.PROJECT_MAIN_SUCCESSFULLY,sms,locale));
		    		 
				
				
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> updateDamCheckList(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damCheckListId = (String) context.get("damCheckListId");
		String description = (String) context.get("description");
		String componentNo = (String) context.get("componentNo");
		String pointNo = (String) context.get("pointNo");
		String mainCategory = (String) context.get("mainCategory");

		try {
			if (UtilValidate.isNotEmpty(damCheckListId)) {
				System.out.print("ddddddddddddddddddddddd");
				Map mapToSave = UtilMisc.toMap("damCheckListId", damCheckListId, "mainCategory", mainCategory,
						"description", description, "subComponentNo", pointNo, "componentNo", componentNo, "status",
						"A");
				int damCheckListDetails = delegator.storeByCondition("damCheckListMaster", mapToSave,
						EntityCondition.makeCondition("damCheckListId", EntityOperator.EQUALS, damCheckListId));

			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public synchronized static Map<String, Object> checkAPI(DispatchContext dctx,
			Map<String, ? extends Object> context) {

		Map<String, Object> result = ServiceUtil.returnSuccess();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		final Locale locale = (Locale) context.get("locale");
		String timeStamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		timeStamp = timeStamp + "0000";
		String AP_Key = "BE1A5963F99A2C8BD45804AADA29E9CE317A69C1ECE1A7EF38A40F18F2C7C187";
		String apiURL = "http://apiwrdhrms.mahaonline.gov.in:8081/GetOffice/GetOfficeData";
		String checksumInput = "MECH89856" + timeStamp + "NANANANANA";

		String rowInput = "{\"ASPID\":\"MECH89856\",\"TimeStamp\":\"" + timeStamp
				+ "\",\"UDF1\":\"NA\",\"UDF2\":\"NA\",\"UDF3\":\"NA\",\"UDF4\":\"NA\",\"UDF5\":\"NA\",";
		checksumInput = "MECH89856" + timeStamp + "NANANANANA";

		APIWRDHRMSHelper obj = new APIWRDHRMSHelper();
		String token = obj.reqToken(AP_Key, timeStamp);
		String checksum = obj.GenerateCheckSumValue(checksumInput);
		String rawInput = rowInput + "Checksum:" + checksum + "}";
		JSONObject jsonObj = null;
		String ResponseMsgFlag = null;

		try {
			URL url = new URL(apiURL);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json");
			conn.setRequestProperty("AuthToken", token);

			OutputStream os = conn.getOutputStream();
			os.write(rawInput.getBytes());
			os.flush();

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
			StringBuilder response = new StringBuilder();
			String responseSingle = null;
			while ((responseSingle = br.readLine()) != null) {
				response.append(responseSingle);
			}
			String output = response.toString();
			jsonObj = new JSONObject(output);
			JSONArray ja_data = jsonObj.getJSONArray("objGetOfficeDatalist");
			String parentOfficeID = null;
			int length = ja_data.length();

			int removeDetails;
			removeDetails = delegator.removeByCondition("officeDetails",
					EntityCondition.makeCondition("name", EntityOperator.NOT_EQUAL, null));
			int k1 = 1;
			for (int i = 0; i < length; i++) {
				String one = null;
				String two = null;

				JSONObject jsonObjNew = ja_data.getJSONObject(i);
				parentOfficeID = jsonObjNew.getString("parentOfficeID").toString();
				String nameMR = jsonObjNew.getString("nameMR").toString();
				String districtID = jsonObjNew.getString("districtID").toString();
				String talukaID = jsonObjNew.getString("talukaID").toString();
				String officeid = jsonObjNew.getString("officeid").toString();
				String name = jsonObjNew.getString("name").toString();
				String splitOfficeName = name;

				// code for split office Name
				String nameShort = name;
				String[] data = nameShort.split(",");

				if (data.length > 0) {
					one = name.split(",")[0];
					one = one + ", ";
					splitOfficeName = name.replace(one, "");
					k1++;
				}
				// end

				String officeStatus = jsonObjNew.getString("officeStatus").toString();
				String UDF5 = jsonObjNew.getString("UDF5").toString();
				String UDF4 = jsonObjNew.getString("UDF4").toString();
				String UDF3 = jsonObjNew.getString("UDF3").toString();
				String village = jsonObjNew.getString("village").toString();
				String UDF2 = jsonObjNew.getString("UDF2").toString();
				String villageID = jsonObjNew.getString("villageID").toString();
				String officeType_new = jsonObjNew.getString("officeType_new").toString();
				String UDF1 = jsonObjNew.getString("UDF1").toString();
				String officeType = jsonObjNew.getString("officeType").toString();

				String sequenceId = (String) delegator.getNextSeqId("officeDetails");
				Map officeDetails = UtilMisc.toMap("tableId", sequenceId, "parentOfficeID", parentOfficeID, "nameMR",
						nameMR, "districtID", districtID, "talukaID", talukaID, "officeID", officeid, "name",
						splitOfficeName, "fullOfficeName", name, "officeStatus", officeStatus, "village", village,
						"villageID", villageID, "officeTypeNew", officeType_new, "officeType", officeType, "udf2", UDF2,
						"udf3", UDF3, "udf4", UDF4, "udf1", UDF1);

				GenericValue valueToStore = delegator.makeValue("officeDetails", officeDetails);
				valueToStore.create();
			}

			conn.disconnect();

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("error===================================" + e);
		}

		return result;
	}

	public static Map<String, Object> saveDeficiency(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String deficiencyNo = (String) context.get("deficiencyNo");
		String category = (String) context.get("category");
		String grNo = (String) context.get("grNo");
		String applicableDate = (String) context.get("applicableDate");
		String description = (String) context.get("description");
		java.sql.Date dateOfCollcetion = null;
		try {
			if (UtilValidate.isNotEmpty(applicableDate)) {
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
				java.util.Date date = sdf1.parse(applicableDate);
				dateOfCollcetion = new java.sql.Date(date.getTime());

				System.out.println("dateOfCollcetion============" + dateOfCollcetion);
			}

			if (UtilValidate.isNotEmpty(description)) {
				String deficiencyId = delegator.getNextSeqId("deficiencyMaster", 1);

				GenericValue deficiencyDetails = delegator.makeValue("deficiencyMaster",
						UtilMisc.toMap("deficiencyId", deficiencyId, "description", description, "deficiencyNo",
								deficiencyNo, "category", category, "applicableDate", dateOfCollcetion, "grNo", grNo,
								"status", "A"));

				deficiencyDetails.create();
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> updateDeficiency(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String deficiencyId = (String) context.get("deficiencyId");
		String deficiencyNo = (String) context.get("deficiencyNo");
		String category = (String) context.get("category");
		String grNo = (String) context.get("grNo");
		String applicableDate = (String) context.get("applicableDate");
		String description = (String) context.get("description");
		java.sql.Date dateOfCollcetion = null;
		try {
			if (UtilValidate.isNotEmpty(applicableDate)) {
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
				java.util.Date date = sdf1.parse(applicableDate);
				dateOfCollcetion = new java.sql.Date(date.getTime());

				System.out.println("dateOfCollcetion============" + dateOfCollcetion);
			}

			if (UtilValidate.isNotEmpty(deficiencyId)) {
				Map mapToSave = UtilMisc.toMap("deficiencyId", deficiencyId, "description", description, "deficiencyNo",
						deficiencyNo, "category", category, "applicableDate", dateOfCollcetion, "grNo", grNo, "status",
						"A");
				int deficiencyMaster = delegator.storeByCondition("deficiencyMaster", mapToSave,
						EntityCondition.makeCondition("deficiencyId", EntityOperator.EQUALS, deficiencyId));
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> saveDamGateCheckList(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String mainComponent = (String) context.get("mainComponent");
		String description = (String) context.get("description");
		String type = (String) context.get("type");

		try {
			if (UtilValidate.isNotEmpty(description)) {
				String damGateCheckListId = delegator.getNextSeqId("damGateCheckList", 1);

				GenericValue damGateDetails = delegator.makeValue("damGateCheckList",
						UtilMisc.toMap("damGateCheckListId", damGateCheckListId, "description", description,
								"mainComponent", mainComponent, "status", "A", "type", type));

				damGateDetails.create();
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> updateDamGateCheckList(DispatchContext ctx,
			Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String mainComponent = (String) context.get("mainComponent");
		String description = (String) context.get("description");
		String type = (String) context.get("type");
		String damGateCheckListId = (String) context.get("damGateCheckListId");

		try {
			if (UtilValidate.isNotEmpty(damGateCheckListId)) {
				Map mapToSave = UtilMisc.toMap("damGateCheckListId", damGateCheckListId, "description", description,
						"mainComponent", mainComponent, "status", "A", "type", type);
				int damGateDetails = delegator.storeByCondition("damGateCheckList", mapToSave,
						EntityCondition.makeCondition("damGateCheckListId", EntityOperator.EQUALS, damGateCheckListId));
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> saveDamObeservation(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String mainComponent = (String) context.get("mainComponent");
		String description = (String) context.get("description");
		String observation = (String) context.get("observation");
		String category = (String) context.get("category");

		try {
			if (UtilValidate.isNotEmpty(description)) {
				String damGateObservListId = delegator.getNextSeqId("damGateObservList", 1);

				GenericValue damGateDetails = delegator.makeValue("damGateObservList",
						UtilMisc.toMap("damGateObservListId", damGateObservListId, "category", category, "observation",
								observation, "description", description, "mainComponent", mainComponent, "status",
								"A"));

				damGateDetails.create();
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> updateDamObeservation(DispatchContext ctx,
			Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String mainComponent = (String) context.get("mainComponent");
		String description = (String) context.get("description");
		String observation = (String) context.get("observation");
		String category = (String) context.get("category");
		String damGateObservListId = (String) context.get("damGateObservListId");

		try {
			if (UtilValidate.isNotEmpty(damGateObservListId)) {
				Map mapToSave = UtilMisc.toMap("damGateObservListId", damGateObservListId, "category", category,
						"observation", observation, "description", description, "mainComponent", mainComponent,
						"status", "A");

				int damGateObservDetails = delegator.storeByCondition("damGateObservList", mapToSave, EntityCondition
						.makeCondition("damGateObservListId", EntityOperator.EQUALS, damGateObservListId));
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> saveInstrument(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String instrumentName = (String) context.get("instrumentName");
		String estimateFile = (String) context.get("workFile");
		String ofbizHome = System.getProperty("user.dir")
				+ "/themes/rainbowstone/webapp/rainbowstone/pravah/UploadedFile";
		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");

		String tempFileNoValue = String.valueOf(Math.random());
		tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());
		String outFilePath = null;
		String outImagePath = null;
		String fileName = estimateFile;

		System.out.println("+++++++++++++++++++saveDamInstrument++++++++++++++");


		try {
			if (UtilValidate.isNotEmpty(instrumentName)) {

				if (UtilValidate.isNotEmpty(estimateFile)) {
					outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName);
					outImagePath = "/framework/images/webapp/images/PDF/" + fileName;

					try {
						RandomAccessFile file = new RandomAccessFile(outFilePath, "rw");
						file.write(byteBufferValue.array());
					} catch (FileNotFoundException e) {
						Debug.logError(e, null);
					} catch (IOException e) {
						Debug.logError(e, null);
					}
					String instrumentId = delegator.getNextSeqId("instrumentMaster", 1);

					GenericValue damGateDetails = delegator.makeValue("instrumentMaster",
							UtilMisc.toMap("instrumentId", instrumentId, "instrumentName", instrumentName, "fileName",
									fileName, "fileLocation", outFilePath, "Type", estimateFile, "fileLink",
									outImagePath, "status", "A"));

					damGateDetails.create();
					successResult.put(masterContantSMS.SUCCESS_MESSAGE, masterUIMessage.getSuccessMessage
			                (resource,masterContantSMS.PROJECT_MAIN_SUCCESSFULLY,"sms",locale));
				}
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> updateInstrument(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String instrumentName = (String) context.get("instrumentName");
		String instrumentId = (String) context.get("instrumentId");
		String estimateFile = (String) context.get("workFile");
		String ofbizHome = System.getProperty("user.dir")
				+ "/themes/rainbowstone/webapp/rainbowstone/pravah/UploadedFile";
		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String tempFileNoValue = String.valueOf(Math.random());
		tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());
		String outFilePath = null;
		String outImagePath = null;
		String fileName = estimateFile;
		try {
			if (UtilValidate.isNotEmpty(instrumentId)) {
				if (UtilValidate.isNotEmpty(estimateFile)) {
					outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName);
					outImagePath = "/framework/images/webapp/images/PDF/" + fileName;

					Map mapToSave = UtilMisc.toMap("instrumentName", instrumentName, "fileName", fileName,
							"fileLocation", outFilePath, "Type", estimateFile, "fileLink", outImagePath, "status", "A");
					int instrumentDetails = delegator.storeByCondition("instrumentMaster", mapToSave,
							EntityCondition.makeCondition("instrumentId", EntityOperator.EQUALS, instrumentId));
				} else {
					Map mapToSave = UtilMisc.toMap("instrumentName", instrumentName);
					int instrumentDetails = delegator.storeByCondition("instrumentMaster", mapToSave,
							EntityCondition.makeCondition("instrumentId", EntityOperator.EQUALS, instrumentId));
				}
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> uploadFile(DispatchContext dctx, Map<String, Object> context) {
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Delegator delegator = (GenericDelegator) dctx.getDelegator();
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("byteBufferValue");
		String fileExtension = (String) context.get("fileExtension");
		// String moduleName = (String) context.get("moduleName");
		String ofbizHome = System.getProperty("java.io.tmpdir");

		String tempFileNoValue = String.valueOf(Math.random());
		String tempFileNameVal = String.valueOf(new java.sql.Timestamp(System.currentTimeMillis()));
		tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());

		String fileName = "import_file" + tempFileNameVal;

		String outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName) + "." + fileExtension;
		context.put("outFilePath", outFilePath);

		String sequenceId = (String) delegator.getNextSeqId("ImportExcelHistoryData", 1);

		List valueToCreate = new LinkedList();

		Map<String, Object> importHistoryMap = UtilMisc.toMap("sequenceId", sequenceId,
				/* "moduleName",moduleName, */"fileName", fileName, "fileLocation", outFilePath, "importDate",
				new java.sql.Timestamp(System.currentTimeMillis()), "importedBy", userLogin.getString("userLoginId"));

		GenericValue createIxlsH = delegator.makeValue("ImportExcelHistoryData", importHistoryMap);
		try {
			// createIxlsH.create();
			valueToCreate.add(createIxlsH);
			delegator.storeAll(valueToCreate);
		} catch (GenericEntityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			RandomAccessFile file = new RandomAccessFile(outFilePath, "rw");
			file.write(byteBufferValue.array());
		} catch (FileNotFoundException e) {
			Debug.logError(e, null);
		} catch (IOException e) {
			Debug.logError(e, null);
		}

		result.put("outFilePath", outFilePath);
		return result;
	}

	public synchronized static Map<String, Object> saveDamCheckexcel(DispatchContext dctx,
			Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String mainCategory = sheet.getRow(i).getCell(0).toString();
					String subComponentNo = sheet.getRow(i).getCell(1).toString();
					String componentNo = sheet.getRow(i).getCell(2).toString();
					String description = sheet.getRow(i).getCell(3).toString();
					if (UtilValidate.isNotEmpty(description)) {
						andExpr.add(EntityCondition.makeCondition("description", EntityOperator.EQUALS, description));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("damCheckListMaster", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {

						} else {
							String tableId = delegator.getNextSeqId("damCheckListMaster", 1);

							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("damCheckListId", tableId, "mainCategory", mainCategory,
									"subComponentNo", subComponentNo, "componentNo", componentNo, "description",
									description, "status", "A");

							GenericValue valueToStore = delegator.makeValue("damCheckListMaster", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public synchronized static Map<String, Object> saveDeficiencyExcel(DispatchContext dctx,
			Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String category = sheet.getRow(i).getCell(0).toString();
					String deficiencyNo = sheet.getRow(i).getCell(1).toString();
					String applicableDate = sheet.getRow(i).getCell(2).toString();
					String description = sheet.getRow(i).getCell(3).toString();
					String grNo = sheet.getRow(i).getCell(4).toString();

					java.sql.Date dateOfCollcetion = null;

					if (UtilValidate.isNotEmpty(description)) {
						andExpr.add(EntityCondition.makeCondition("deficiencyNo", EntityOperator.EQUALS, deficiencyNo));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("deficiencyMaster", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(applicableDate)) {
							SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy");
							java.util.Date date = sdf1.parse(applicableDate);
							dateOfCollcetion = new java.sql.Date(date.getTime());
						}
						if (UtilValidate.isNotEmpty(CWRData)) {

						} else {
							String tableId = delegator.getNextSeqId("deficiencyMaster", 1);

							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("deficiencyId", tableId, "category", category, "deficiencyNo",
									deficiencyNo, "applicableDate", dateOfCollcetion, "grNo", grNo, "description",
									description, "status", "A");

							GenericValue valueToStore = delegator.makeValue("deficiencyMaster", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public synchronized static Map<String, Object> saveInstrumentExcel(DispatchContext dctx,
			Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String instrumentName = sheet.getRow(i).getCell(0).toString();

					java.sql.Date dateOfCollcetion = null;

					if (UtilValidate.isNotEmpty(instrumentName)) {
						andExpr.add(
								EntityCondition.makeCondition("instrumentName", EntityOperator.EQUALS, instrumentName));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("instrumentMaster", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {

						} else {
							String tableId = delegator.getNextSeqId("instrumentMaster", 1);

							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("instrumentId", tableId, "instrumentName", instrumentName, "status",
									"A");

							GenericValue valueToStore = delegator.makeValue("instrumentMaster", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public synchronized static Map<String, Object> saveDamGateExcel(DispatchContext dctx, Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");
		String type = (String) context.get("type");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String mainComponent = sheet.getRow(i).getCell(0).toString();
					String questionarie = sheet.getRow(i).getCell(1).toString();
					if (UtilValidate.isNotEmpty(questionarie)) {
						andExpr.add(
								EntityCondition.makeCondition("mainComponent", EntityOperator.EQUALS, mainComponent));
						andExpr.add(EntityCondition.makeCondition("description", EntityOperator.EQUALS, questionarie));

						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("damGateCheckList", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {

						} else {
							String tableId = delegator.getNextSeqId("damGateCheckList", 1);

							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("damGateCheckListId", tableId, "mainComponent", mainComponent,
									"description", questionarie, "type", type, "status", "A");

							GenericValue valueToStore = delegator.makeValue("damGateCheckList", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public synchronized static Map<String, Object> saveDamGateObservExcel(DispatchContext dctx,
			Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");
		String type = (String) context.get("type");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String mainComponentId = sheet.getRow(i).getCell(0).toString();
					String questionarieId = sheet.getRow(i).getCell(1).toString();
					String observation = sheet.getRow(i).getCell(2).toString();
					String Category = sheet.getRow(i).getCell(3).toString();

					if (UtilValidate.isNotEmpty(mainComponentId)) {
						andExpr.add(
								EntityCondition.makeCondition("mainComponent", EntityOperator.EQUALS, mainComponentId));
						andExpr.add(
								EntityCondition.makeCondition("description", EntityOperator.EQUALS, questionarieId));
						andExpr.add(EntityCondition.makeCondition("observation", EntityOperator.EQUALS, observation));

						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("damGateObservList", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {

						} else {
							String tableId = delegator.getNextSeqId("damGateObservList", 1);

							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("damGateObservListId", tableId, "mainComponent", mainComponentId,
									"description", questionarieId, "observation", observation, "category", Category,
									"status", "A");

							GenericValue valueToStore = delegator.makeValue("damGateObservList", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public static Map<String, Object> saveStructureDetails(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String idcName = (String) context.get("idcName");
		String regionName = (String) context.get("regionName");
		String circleName = (String) context.get("circleName");
		String divName = (String) context.get("divName");
		String subDivName = (String) context.get("subDivName");
		String damName = (String) context.get("damName");
		String damLocation = (String) context.get("damLocation");
		String district = (String) context.get("district");
		String tehsil = (String) context.get("tehsil");
		String damType = (String) context.get("damType");
		String classOfDam = (String) context.get("classOfDam");
		String toposheetNo = (String) context.get("toposheetNo");
		String latitude = (String) context.get("latitude");
		String longitude = (String) context.get("longitude");
		String purpose = (String) context.get("purpose");
		String riverNalla = (String) context.get("riverNalla");
		String completionYear = (String) context.get("completionYear");
		String gatedUnGate = (String) context.get("gatedUnGate");
		String typeOfGallery = (String) context.get("typeOfGallery");
		String gateType = (String) context.get("gateType");
		String spillType = (String) context.get("spillType");
		String edaType = (String) context.get("edaType");
		String annualGenerations = (String) context.get("annualGenerations");

		BigDecimal totalLength = (BigDecimal) context.get("totalLength");
		BigDecimal maxHeight = (BigDecimal) context.get("maxHeight");
		BigDecimal grossStorage = (BigDecimal) context.get("grossStorage");
		System.out.println("============grossStorage==============="+grossStorage);
		BigDecimal catchmentArea = (BigDecimal) context.get("catchmentArea");
		BigDecimal meanAnnualRainfall = (BigDecimal) context.get("meanAnnualRainfall");

		BigDecimal tblRL = (BigDecimal) context.get("tblRL");
		BigDecimal mwlRL = (BigDecimal) context.get("mwlRL");
		BigDecimal frl = (BigDecimal) context.get("frl");
		BigDecimal spilway = (BigDecimal) context.get("spilway");
		BigDecimal mddl = (BigDecimal) context.get("mddl");
		BigDecimal riverBedLevel = (BigDecimal) context.get("riverBedLevel");
		BigDecimal liveStorage = (BigDecimal) context.get("liveStorage");
		System.out.println("============liveStorage==============="+liveStorage);
		BigDecimal deadStorage = (BigDecimal) context.get("deadStorage");
		System.out.println("============deadStorage==============="+deadStorage);

		BigDecimal spillLength = (BigDecimal) context.get("spillLength");
		BigDecimal designFlood = (BigDecimal) context.get("designFlood");
		BigDecimal noOfgallery = (BigDecimal) context.get("noOfgallery");
		BigDecimal noOfGate = (BigDecimal) context.get("noOfGate");
		BigDecimal gateSize = (BigDecimal) context.get("gateSize");
		BigDecimal rbcCanalLength = (BigDecimal) context.get("rbcCanalLength");
		BigDecimal lbcCanalLength = (BigDecimal) context.get("lbcCanalLength");
		BigDecimal rbcDischargeCapacity = (BigDecimal) context.get("rbcDischargeCapacity");
		BigDecimal lbcDischargeCapacity = (BigDecimal) context.get("lbcDischargeCapacity");
		BigDecimal totalDischargeCapacity = (BigDecimal) context.get("totalDischargeCapacity");
		BigDecimal rbcGrossCommand = (BigDecimal) context.get("rbcGrossCommand");
		BigDecimal lbcGrossCommand = (BigDecimal) context.get("lbcGrossCommand");
		BigDecimal totalGrossCommand = (BigDecimal) context.get("totalGrossCommand");
		BigDecimal rbcIrrigableCommand = (BigDecimal) context.get("rbcIrrigableCommand");
		BigDecimal lbcIrrigableCommand = (BigDecimal) context.get("lbcIrrigableCommand");
		BigDecimal totalIrrigableCommand = (BigDecimal) context.get("totalIrrigableCommand");
		BigDecimal rbcCroppedArea = (BigDecimal) context.get("rbcCroppedArea");
		BigDecimal lbcCroppedArea = (BigDecimal) context.get("lbcCroppedArea");
		BigDecimal totalCroppedArea = (BigDecimal) context.get("totalCroppedArea");
		BigDecimal installedCapacity = (BigDecimal) context.get("installedCapacity");

		String inchargename = (String) context.get("inchargename");
		String designation = (String) context.get("designation");
		String mobileNo = (String) context.get("mobileNo");
		String reservoirType = (String) context.get("reservoirType");
		System.out.println("============reservoirType==============="+reservoirType);
		String storageStatus = (String) context.get("storageStatus");
		System.out.println("============storageStatus==============="+storageStatus);
		// added for new field recieved from department
		String projectname = (String) context.get("projectname");
		System.out.println("============projectname==============="+projectname);

		String projectstatus = (String) context.get("projectstatus");
		String projecttype = (String) context.get("projecttype");
		String river = (String) context.get("river");
		String subbasin = (String) context.get("subbasin");
		String Basin = (String) context.get("Basin");
		String revenueregion = (String) context.get("revenueregion");
		String remark = (String) context.get("remark");
		String Nationalimportance = (String) context.get("nationalimportance");

		
		String DamCode = (String) context.get("DamCode");
		System.out.println("============DamCode==============="+DamCode);
		BigDecimal grossStoragetmc = (BigDecimal) context.get("grossStoragetmc");
		System.out.println("============grossStoragetmc==============="+grossStoragetmc);
		BigDecimal liveStoragetmc = (BigDecimal) context.get("liveStoragetmc");
		System.out.println("============liveStoragetmc==============="+liveStoragetmc);
		BigDecimal deadStoragetmc = (BigDecimal) context.get("deadStoragetmc");
		System.out.println("============deadStoragetmc==============="+deadStoragetmc);
		String RL_Min = (String) context.get("RL_Min");
		System.out.println("============RL_Min==============="+RL_Min);
		String RL_Max = (String) context.get("RL_Max");
		System.out.println("============RL_Max==============="+RL_Max);
		String GisId = (String) context.get("GisId");
		System.out.println("============GisId==============="+GisId);
		String damNamemr = (String) context.get("damNamemr");
		System.out.println("============damNamemr==============="+damNamemr);
		String Damtypemara = (String) context.get("Damtypemara");
		System.out.println("============Damtypemara==============="+Damtypemara);
		String village = (String) context.get("village");
		System.out.println("============village==============="+village);
		
		List<GenericValue> idcDetailList = FastList.newInstance();
		List<GenericValue> regionDetailList = FastList.newInstance();
		List<GenericValue> circleDetailList = FastList.newInstance();
		List<GenericValue> divisionDetailList = FastList.newInstance();
		List<GenericValue> districtDetailList = FastList.newInstance();
		List<GenericValue> talukaDetailList = FastList.newInstance();
		List<GenericValue> basinDetailList = FastList.newInstance();
		List<GenericValue> subBasinDetailList = FastList.newInstance();
		List<GenericValue> projectDetailList = FastList.newInstance();
		//String damId = findList.get(0).getString("damId");
		String structId = (String) context.get("structId");
		String mantralayaId = "0000001";
		String mantralayaName = "Water Resources Department - Mumbai";
		String mantralayaNameMr = "प्रधान सचिव, जलसंपदा विभाग, मुंबई";
		
		String idcFullName = "";
		String idcFullNameMr = "";
		
		String regionFullName = "";
		String regionFullNameMr = "";
		
		String circleFullName = "";
		String circleFullNameMr = "";
		
		String divisionFullName = "";
		String divisionFullNameMr = "";
		
		String subdivisionFullName = "";
		String subdivisionFullNameMr = "";
		
		String districtFullName = "";
		String districtFullNameMr = "";
		
		String talukaFullName = "";
		String talukaFullNameMr = "";
		
		String basinFullName = "";
		String basinFullNameMr = "";
		
		String subBasinFullName = "";
		String subBasinFullNameMr = "";
		
		String projectFullName = "";
		String projectFullNameMr = "";
		
		try {
			if (UtilValidate.isNotEmpty(idcName)) {
				idcDetailList = delegator.findList("officeDetails", EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, idcName), null, null, null, false);
				idcFullName = idcDetailList.get(0).getString("fullOfficeName");
				idcFullNameMr = idcDetailList.get(0).getString("nameMR");
			}
			if (UtilValidate.isNotEmpty(regionName)) {
				regionDetailList = delegator.findList("officeDetails", EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, regionName), null, null, null, false);
				regionFullName = regionDetailList.get(0).getString("fullOfficeName");
				regionFullNameMr = regionDetailList.get(0).getString("nameMR");
			}
			if (UtilValidate.isNotEmpty(circleName)) {
				circleDetailList = delegator.findList("officeDetails", EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, circleName), null, null, null, false);
				circleFullName = circleDetailList.get(0).getString("fullOfficeName");
				circleFullNameMr = circleDetailList.get(0).getString("nameMR");
			}
			if (UtilValidate.isNotEmpty(divName)) {
				divisionDetailList = delegator.findList("officeDetails", EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, divName), null, null, null, false);
				divisionFullName = divisionDetailList.get(0).getString("fullOfficeName");
				divisionFullNameMr = divisionDetailList.get(0).getString("nameMR");
			}

			if (UtilValidate.isNotEmpty(district)) {
				districtDetailList = delegator.findList("districtMaster", EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, district), null, null, null, false);
				districtFullName = districtDetailList.get(0).getString("name");
				districtFullNameMr = districtDetailList.get(0).getString("nameMarathi");
			}
			if (UtilValidate.isNotEmpty(tehsil)) {
				talukaDetailList = delegator.findList("talukMaster", EntityCondition.makeCondition("talukId", EntityOperator.EQUALS, tehsil), null, null, null, false);
				talukaFullName = talukaDetailList.get(0).getString("name");
				talukaFullNameMr = talukaDetailList.get(0).getString("nameMarathi");
			}
			if (UtilValidate.isNotEmpty(Basin)) {
				basinDetailList = delegator.findList("basinMaster", EntityCondition.makeCondition("basinId", EntityOperator.EQUALS, Basin), null, null, null, false);
				basinFullName = basinDetailList.get(0).getString("basinName");
				basinFullNameMr = basinDetailList.get(0).getString("basinNameMarathi");
			}
			if (UtilValidate.isNotEmpty(subbasin)) {
				subBasinDetailList = delegator.findList("subBasinMaster", EntityCondition.makeCondition("subBasinId", EntityOperator.EQUALS, subbasin), null, null, null, false);
				subBasinFullName = subBasinDetailList.get(0).getString("basinName");
				subBasinFullNameMr = subBasinDetailList.get(0).getString("basinNameMarathi");
			}
			if (UtilValidate.isNotEmpty(projectname)) {
				projectDetailList = delegator.findList("projectMaster", EntityCondition.makeCondition("projectId", EntityOperator.EQUALS, projectname), null, null, null, false);
				projectFullName = projectDetailList.get(0).getString("projectName");
				projectFullNameMr = projectDetailList.get(0).getString("projectNameMr");
			}
			System.out.println("============");

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// End

		if("No".equals(Nationalimportance))
		{
			Nationalimportance="";
		}
		String officeId = null;
		if (UtilValidate.isNotEmpty(subDivName))
			officeId = subDivName;
		
		else
			officeId = divName;
		try {
			if (UtilValidate.isNotEmpty(damName)) {
			
				String villageName = null;
				String villageNameMarathi = null;
				List<GenericValue> villageDetailList = FastList.newInstance();
				if (UtilValidate.isNotEmpty(village)) {
					villageDetailList = delegator.findList("villageMaster", EntityCondition.makeCondition("villageId", EntityOperator.EQUALS, village), null, null, null, false);
					villageName = villageDetailList.get(0).getString("name");
					villageNameMarathi = villageDetailList.get(0).getString("nameMarathi");
				}
				
				if (UtilValidate.isNotEmpty(structId)) {
					System.out.println("============1===============");
					Map mapToSave = UtilMisc.toMap("totalLength", totalLength, "maxHeight", maxHeight,
							"designed_gross_storage_incumec", grossStorage, "structureName", damName, "officeId", officeId,
							"status", "A", "designed_dead_storage_incumec", deadStorage, "designed_live_storage_incumec",
							liveStorage, "river_id", river, "is_gated", gatedUnGate, "toposheetNo", toposheetNo,
							"purpose", purpose, "catchmentArea", catchmentArea, "completionYear", completionYear,
							"meanAnnualRainfall", meanAnnualRainfall, "tblRL", tblRL, "mwlRL", mwlRL, "frl", frl, "spilway",
							spilway, "mddl", mddl, "riverBedLevel", riverBedLevel, "spillType", spillType, "spillLength",
							spillLength, "designFlood", designFlood, "typeOfGallery", typeOfGallery, "noOfgallery",
							noOfgallery, "gateType", gateType, "noOfGate", noOfGate, "gateSize", gateSize, "edaType",
							edaType, "rbcCanalLength", rbcCanalLength, "lbcCanalLength", lbcCanalLength,
							"rbcDischargeCapacity", rbcDischargeCapacity, "lbcDischargeCapacity", lbcDischargeCapacity,
							"totalDischargeCapacity", totalDischargeCapacity, "rbcGrossCommand", rbcGrossCommand,
							"totalGrossCommand", totalGrossCommand, "lbcGrossCommand", lbcGrossCommand,
							"rbcIrrigableCommand", rbcIrrigableCommand, "lbcIrrigableCommand", lbcIrrigableCommand,
							"totalIrrigableCommand", totalIrrigableCommand, "rbcCroppedArea", rbcCroppedArea,
							"lbcCroppedArea", lbcCroppedArea, "totalCroppedArea", totalCroppedArea, "installedCapacity",
							installedCapacity, "annualGenerations", annualGenerations, "inchargename", inchargename,
							"designation", designation, "mobileNo", mobileNo, "type_of_reservoir_id", reservoirType,
							"storageStatus", storageStatus, "project_id", projectname, "projectname", projectFullName,"projectstatus", projectstatus,
							"projecttype", projecttype, "river", riverNalla, "subbasin", subBasinFullName, "Basin", basinFullName,"subBasinId", subbasin, "basinId", Basin,
							"revenueregion", revenueregion, "remark", remark,"NationalImportanceDam",Nationalimportance,"storage_creation_status_id",storageStatus,
							"damCode",DamCode,"designed_dead_storage_Tmc",deadStoragetmc,"designed_gross_storage_Tmc",grossStoragetmc,
							"designed_live_storage_Tmc",liveStoragetmc,"rl_max_inm",RL_Max,"rl_min_inm",RL_Min,
							"gis_id",GisId,"structureNameMarathi", damNamemr);
					
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, structId));
					System.out.println("============2===============");
					Map mapToSave2 = UtilMisc.toMap("subDivName",
							subDivName, "damType", damType, "classOfDam", classOfDam, "latitude", latitude, "longitude", longitude, 
							"office_mantralaya_id",mantralayaId,"office_mantralaya_name",mantralayaName, "office_mantralaya_namemr", mantralayaNameMr, "idcName",
							  idcName, "office_corporation_name", idcFullName,"office_corporation_namemr",idcFullNameMr, 
							  "regionName", regionName,"office_region_name", regionFullName,"office_region_namemr", regionFullNameMr, 
							  "circleName", circleName,"office_circle_name", circleFullName,"office_circle_namemr",circleFullNameMr, 
							  "divName", divName, "office_division_name",divisionFullName, "office_division_namemr", divisionFullNameMr, 
							  "district_id", district, "district_name",districtFullName,"district_namemr",districtFullNameMr,
								"taluka_id", tehsil, "taluka_name",talukaFullName,"taluka_namemr",talukaFullNameMr);
					
					int damCheckListDetails2 = delegator.storeByCondition("structureMasterType", mapToSave2,
							EntityCondition.makeCondition("damId", EntityOperator.EQUALS, structId));
					
				}
				
				else 
				{ 
					System.out.println("============3===============");
					String structureId = delegator.getNextSeqId("structureMaster", 1);
					GenericValue structureList = delegator.makeValue("structureMaster", UtilMisc.toMap("structureId",
							structureId, "totalLength", totalLength, "maxHeight", maxHeight,
							"designed_gross_storage_incumec", grossStorage, "structureName", damName, "officeId", divName,
							"status", "A", "designed_dead_storage_incumec", deadStorage, "designed_live_storage_incumec",
							liveStorage, "river_id", river, "is_gated", gatedUnGate, "toposheetNo", toposheetNo,
							"purpose", purpose, "catchmentArea", catchmentArea, "completionYear", completionYear,
							"meanAnnualRainfall", meanAnnualRainfall, "tblRL", tblRL, "mwlRL", mwlRL, "frl", frl, "spilway",
							spilway, "mddl", mddl, "riverBedLevel", riverBedLevel, "spillType", spillType, "spillLength",
							spillLength, "designFlood", designFlood, "typeOfGallery", typeOfGallery, "noOfgallery",
							noOfgallery, "gateType", gateType, "noOfGate", noOfGate, "gateSize", gateSize, "edaType",
							edaType, "rbcCanalLength", rbcCanalLength, "lbcCanalLength", lbcCanalLength,
							"rbcDischargeCapacity", rbcDischargeCapacity, "lbcDischargeCapacity", lbcDischargeCapacity,
							"totalDischargeCapacity", totalDischargeCapacity, "rbcGrossCommand", rbcGrossCommand,
							"totalGrossCommand", totalGrossCommand, "lbcGrossCommand", lbcGrossCommand,
							"rbcIrrigableCommand", rbcIrrigableCommand, "lbcIrrigableCommand", lbcIrrigableCommand,
							"totalIrrigableCommand", totalIrrigableCommand, "rbcCroppedArea", rbcCroppedArea,
							"lbcCroppedArea", lbcCroppedArea, "totalCroppedArea", totalCroppedArea, "installedCapacity",
							installedCapacity, "annualGenerations", annualGenerations, "inchargename", inchargename,
							"designation", designation, "mobileNo", mobileNo, "type_of_reservoir_id", reservoirType,
							/*"storageStatus", storageStatus*/ "project_id", projectname, "projectname", projectFullName, "projectstatus", projectstatus,
							"projecttype", projecttype, "river", river, "subbasin", subBasinFullName, "Basin", basinFullName,"subBasinId", subbasin, "basinId", Basin,
							"revenueregion", revenueregion, "remark", remark,"NationalImportanceDam",Nationalimportance,"storage_creation_status_id",storageStatus,
							"damCode",DamCode,"designed_dead_storage_Tmc",deadStoragetmc,"designed_gross_storage_Tmc",grossStoragetmc,"designed_live_storage_Tmc",liveStoragetmc,
							"rl_max_inm",RL_Max,"rl_min_inm",RL_Min,"gis_id",GisId,"structureNameMarathi", damNamemr));

					structureList.create();
					String structureTypeId = delegator.getNextSeqId("structureMasterType", 1);

					GenericValue structureTypeList = delegator.makeValue("structureMasterType",
							UtilMisc.toMap("structureTypeId", structureTypeId,
									"district_id", district, "district_name",districtFullName,"district_namemr",districtFullNameMr,
									"taluka_id", tehsil, "taluka_name",talukaFullName,"taluka_namemr",talukaFullNameMr,
									"subDivName",subDivName, "damType", damType, "classOfDam", classOfDam, "damId",
									structureId, "latitude", latitude, "longitude", longitude, 
									"office_mantralaya_id",mantralayaId,"office_mantralaya_name",mantralayaName, "office_mantralaya_namemr", mantralayaNameMr, "idcName",
									  idcName, "office_corporation_name", idcFullName,"office_corporation_namemr",idcFullNameMr, 
									  "regionName", regionName,"office_region_name", regionFullName,"office_region_namemr", regionFullNameMr, 
									  "circleName", circleName,"office_circle_name", circleFullName,"office_circle_namemr",circleFullNameMr, 
									  "divName",divName,"parent_id",divName,"office_division_name",divisionFullName, "office_division_namemr", divisionFullNameMr,"damTypeMarathi",Damtypemara,"village_id",village
									  ,"village_name",villageName,"village_namemr",villageNameMarathi));

					structureTypeList.create();
					
					// Added by shubham
					String damStorageId2 = delegator.getNextSeqId("damStorageDetails", 1);
					GenericValue damStorageSaiving = delegator.makeValue("damStorageDetails",
							UtilMisc.toMap("damStroageId",damStorageId2,"damId",structureId));

					damStorageSaiving.create();
					System.out.println("============saved completed===============");
				}
			}
		} catch (Exception e) {
			System.err.println("------------------------------error-----------" + e);
		}
		return successResult;
	}

		
	public static String getBelowOffice(HttpServletRequest request, HttpServletResponse response)
			throws IOException, GenericEntityException {

		GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

		String officeIdWing = request.getParameter("officeId");
		String officeIdWingArray[] = officeIdWing.split(",");

		String officeId = officeIdWingArray[0];
		String wingType = officeIdWingArray[1];
		
		// Code added for officeType
					List<EntityCondition> andExprofficeType = FastList.newInstance();
					EntityCondition mainCondofficeType = null;
					andExprofficeType.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, officeId));
					mainCondofficeType = EntityCondition.makeCondition(andExprofficeType, EntityOperator.AND);
					List<GenericValue> findListofficeType = FastList.newInstance();
					findListofficeType = delegator.findList("officeDetails", mainCondofficeType, null, null, null, false);
					String officeTypeString = null;
					String belowOfficeTypeString=null;
					if (UtilValidate.isNotEmpty(findListofficeType)) {
						officeTypeString = findListofficeType.get(0).getString("officeTypeNew");
						System.out.println("====officeTypeString 123 === "+officeTypeString);
						if(officeTypeString.equals("Corporation"))
						{
							belowOfficeTypeString="Region";
						}
						else if(officeTypeString.equals("Region"))
						{
							belowOfficeTypeString="Circle";
						}
						else if(officeTypeString.equals("Circle"))
						{
							belowOfficeTypeString="Division";
						}
						else if(officeTypeString.equals("Division"))
						{
							belowOfficeTypeString="Sub Division";
						}
						else if(officeTypeString.equals("Sub Division"))
						{
							belowOfficeTypeString="Section";
						}
							
					}
					
		List<EntityCondition> andExprs2 = FastList.newInstance();
		EntityCondition mainCond2 = null;
		List<GenericValue> workDetailList = FastList.newInstance();

		try {
			andExprs2.add(EntityCondition.makeCondition("parentOfficeID", EntityOperator.EQUALS, officeId));
			if(belowOfficeTypeString != null) {
			andExprs2.add(EntityCondition.makeCondition("officeTypeNew", EntityOperator.EQUALS, belowOfficeTypeString));
			}
			//if (UtilValidate.isNotEmpty(wingType) && !wingType.equals("admin"))
				//andExprs2.add(EntityCondition.makeCondition("udf1", EntityOperator.EQUALS, wingType));

			mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);

			workDetailList = delegator.findList("officeDetails", mainCond2, null, null, null, false);

		} catch (Exception e) {
			e.printStackTrace();
		}

		JSONArray obj = new JSONArray(workDetailList);

		response.setContentType("application/json");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(obj);
		out.flush();

		return "success";
	}

	public static Map<String, Object> removeDamCheckList(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map damCheckListMaster = null;

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damCheckListId = (String) context.get("damCheckListId");
		System.out.println("===============Status" + status);
		try {

			if (status.equals("status")) {
				damCheckListMaster = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue officeType = EntityQuery.use(delegator).from("damCheckListMaster")
						.where("damCheckListId", damCheckListId).queryOne();
				officeType.remove();

			} else {
				/*
				 * int damCheckListDetails = delegator.storeByCondition("damCheckListMaster",
				 * mapToSave,
				 * EntityCondition.makeCondition("damCheckListId",EntityOperator.EQUALS,
				 * damCheckListId));
				 */
				int valueToStore = delegator.storeByCondition("damCheckListMaster", damCheckListMaster,
						EntityCondition.makeCondition("damCheckListId", EntityOperator.EQUALS, damCheckListId));
			}

			/*
			 * int removeDetails; removeDetails =
			 * delegator.removeByCondition("deficiencyMaster",
			 * EntityCondition.makeCondition("deficiencyId",EntityOperator.EQUALS,
			 * deficiencyId));
			 */

		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> removeDeficiency(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String deficiencyId = (String) context.get("deficiencyId");
		try {
			int removeDetails;
			removeDetails = delegator.removeByCondition("deficiencyMaster",
					EntityCondition.makeCondition("deficiencyId", EntityOperator.EQUALS, deficiencyId));
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> removeDamGateCheckList(DispatchContext ctx,
			Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damGateCheckListId = (String) context.get("damGateCheckListId");

		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map damGateCheckList = null;
		try {
			if (status.equals("status")) {
				damGateCheckList = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("damGateCheckList")
						.where("damGateCheckListId", damGateCheckListId).queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("damGateCheckList", damGateCheckList,
						EntityCondition.makeCondition("damGateCheckListId", EntityOperator.EQUALS, damGateCheckListId));
			}
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> removeDamGateObserMaster(DispatchContext ctx,
			Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();
		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map damGateObservList = null;

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damGateObservListId = (String) context.get("damGateObservListId");
		try {
			if (status.equals("status")) {
				damGateObservList = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("damGateObservList")
						.where("damGateObservListId", damGateObservListId).queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("damGateObservList", damGateObservList, EntityCondition
						.makeCondition("damGateObservListId", EntityOperator.EQUALS, damGateObservListId));
			}
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> removeInstrument(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();
		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map instrumentList = null;
		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String instrumentId = (String) context.get("instrumentId");
		try {
			if (status.equals("status")) {
				instrumentList = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("instrumentMaster")
						.where("instrumentId", instrumentId).queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("instrumentMaster", instrumentList,
						EntityCondition.makeCondition("instrumentId", EntityOperator.EQUALS, instrumentId));
			}
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> saveDamInstrument(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damId = (String) context.get("damId");
		try {
			if (UtilValidate.isNotEmpty(damId)) {
				List<EntityCondition> andExpr = FastList.newInstance();
				EntityCondition mainCond = null;
				List<GenericValue> damList = FastList.newInstance();

				andExpr.add(EntityCondition.makeCondition("damId", EntityOperator.EQUALS, damId));
				mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

				damList = delegator.findList("damInstrumentMaster", mainCond, null, null, null, false);

				if (UtilValidate.isEmpty(damList)) {
					String damInstrumentId = delegator.getNextSeqId("damInstrumentMaster", 1);

					GenericValue damGateDetails = delegator.makeValue("damInstrumentMaster",
							UtilMisc.toMap("damInstrumentId", damInstrumentId, "damId", damId, "status", "A"));

					damGateDetails.create();
					System.out.println("+++++++++++++++++++damGateDetails.creaete()++++++++++++++");

					successResult.put(masterContantSMS.SUCCESS_MESSAGE, masterUIMessage.getSuccessMessage
		                    (resource,masterContantSMS.PROJECT_MAIN_SUCCESSFULLY,"sms",locale));
		    	
				}
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> saveInstrumentInDam(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damId = (String) context.get("damId");
		String instrumentId = (String) context.get("instrumentId");
		String damInstrumentId = (String) context.get("damInstrumentId");
		BigDecimal instCount = (BigDecimal) context.get("instCount");
		try {

			if (UtilValidate.isNotEmpty(damId)) {
				List<EntityCondition> andExpr = FastList.newInstance();
				EntityCondition mainCond = null;
				List<GenericValue> damList = FastList.newInstance();

				andExpr.add(EntityCondition.makeCondition("damInstrumentId", EntityOperator.EQUALS, damInstrumentId));
				andExpr.add(EntityCondition.makeCondition("instrumentId", EntityOperator.EQUALS, instrumentId));

				mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

				damList = delegator.findList("damInstrumentMaster1", mainCond, null, null, null, false);

				if (UtilValidate.isEmpty(damList)) {
					String damInstrumentId1 = delegator.getNextSeqId("damInstrumentMaster1", 1);
					GenericValue damGateDetails1 = delegator.makeValue("damInstrumentMaster1",
							UtilMisc.toMap("damInstrumentId1", damInstrumentId1, "damInstrumentId", damInstrumentId,
									"instrumentId", instrumentId, "instrumentCount", instCount, "status", "A"));

					damGateDetails1.create();
				}
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		successResult.put("damId", damId);
		successResult.put("damInstrumentId", damInstrumentId);
		return successResult;
	}

	public static Map<String, Object> removeDamInstrument(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damInstrumentId = (String) context.get("damInstrumentId");
		System.out.print("error======damInstrumentId========" + damInstrumentId);
		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map damInstrumentMaster = null;
		try {
			if (status.equals("status")) {
				damInstrumentMaster = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("damInstrumentMaster")
						.where("damInstrumentId", damInstrumentId).queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("damInstrumentMaster", damInstrumentMaster,
						EntityCondition.makeCondition("damInstrumentId", EntityOperator.EQUALS, damInstrumentId));
			}
		}

		catch (Exception e) {
			System.out.println("error======================" + e);
		}
		return successResult;
	}

	public static Map<String, Object> removeDamInstrument1(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String damInstrumentId = (String) context.get("damInstrumentId");
		String damId = (String) context.get("damId");
		String damInstrumentId1 = (String) context.get("damInstrumentId1");
		try {
			int removeDetails;
			removeDetails = delegator.removeByCondition("damInstrumentMaster1",
					EntityCondition.makeCondition("damInstrumentId1", EntityOperator.EQUALS, damInstrumentId1));
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}
		successResult.put("damId", damId);
		successResult.put("damInstrumentId", damInstrumentId);
		return successResult;
	}

	public synchronized static Map<String, Object> saveDistrictExcel(DispatchContext dctx,
			Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String districtId = sheet.getRow(i).getCell(0).toString();
					String districtIdnew = districtId.split("\\.")[0];
					String status = sheet.getRow(i).getCell(1).toString();
					String name = sheet.getRow(i).getCell(2).toString();
					String nameMarathi = sheet.getRow(i).getCell(3).toString();

					java.sql.Date dateOfCollcetion = null;

					if (UtilValidate.isNotEmpty(districtId)) {
						andExpr.add(EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, districtIdnew));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("districtMaster", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {
							Map mapToSave = UtilMisc.toMap("status", status, "name", name, "nameMarathi", nameMarathi);
							int damCheckListDetails = delegator.storeByCondition("districtMaster", mapToSave,
									EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, districtIdnew));
						} else {
							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("districtId", districtIdnew, "status", status, "name", name,
									"nameMarathi", nameMarathi);

							GenericValue valueToStore = delegator.makeValue("districtMaster", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public synchronized static Map<String, Object> saveVillageExcel(DispatchContext dctx, Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String villageId = sheet.getRow(i).getCell(0).toString();
					String villageIdNew = villageId.split("\\.")[0];
					String status = sheet.getRow(i).getCell(1).toString();
					String name = sheet.getRow(i).getCell(2).toString();
					String nameMarathi = sheet.getRow(i).getCell(3).toString();
					String districtId = sheet.getRow(i).getCell(4).toString();
					String districtIdNew = districtId.split("\\.")[0];
					String talukId = sheet.getRow(i).getCell(5).toString();
					String talukIdNew = talukId.split("\\.")[0];

					java.sql.Date dateOfCollcetion = null;

					if (UtilValidate.isNotEmpty(villageId)) {
						andExpr.add(EntityCondition.makeCondition("villageId", EntityOperator.EQUALS, villageIdNew));
						andExpr.add(EntityCondition.makeCondition("talukId", EntityOperator.EQUALS, talukIdNew));
						andExpr.add(EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, districtIdNew));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("villageMaster", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {
							Map mapToSave = UtilMisc.toMap("status", status, "name", name, "nameMarathi", nameMarathi,
									"districtId", districtIdNew, "talukId", talukIdNew);
							int damCheckListDetails = delegator.storeByCondition("villageMaster", mapToSave, mainCond);
						} else {
							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("villageId", villageIdNew, "status", status, "name", name,
									"nameMarathi", nameMarathi, "districtId", districtIdNew, "talukId", talukIdNew);

							GenericValue valueToStore = delegator.makeValue("villageMaster", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public synchronized static Map<String, Object> saveTalukExcel(DispatchContext dctx, Map<String, Object> context) {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");

		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");

		List<GenericValue> CWRData = FastList.newInstance();
		Map value = null;

		try {
			String outFilePath = null;
			Map<String, Object> extenalVal = FastMap.newInstance();

			try {
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileForImport", UtilMisc.toMap(
						"byteBufferValue", byteBufferValue, "fileExtension", fileExtension, "userLogin", userLogin));

				if (UtilValidate.isNotEmpty(fileUploadMap))
					outFilePath = (String) fileUploadMap.get("outFilePath");
			} catch (GenericServiceException e1) {
				e1.printStackTrace();
			}

			try {

				XSSFWorkbook book = new XSSFWorkbook(outFilePath);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();

				for (int i = 1; i <= noOfRows; i++) {
					List<EntityCondition> andExpr = FastList.newInstance();
					EntityCondition mainCond = null;

					String talukId = sheet.getRow(i).getCell(0).toString();
					String talukIdNew = talukId.split("\\.")[0];
					String status = sheet.getRow(i).getCell(1).toString();
					String name = sheet.getRow(i).getCell(2).toString();
					String nameMarathi = sheet.getRow(i).getCell(3).toString();
					String districtId = sheet.getRow(i).getCell(4).toString();
					String districtIdNew = districtId.split("\\.")[0];

					java.sql.Date dateOfCollcetion = null;

					if (UtilValidate.isNotEmpty(talukId)) {
						andExpr.add(EntityCondition.makeCondition("talukId", EntityOperator.EQUALS, talukIdNew));
						andExpr.add(EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, districtIdNew));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);

						CWRData = delegator.findList("talukMaster", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(CWRData)) {
							Map mapToSave = UtilMisc.toMap("status", status, "name", name, "nameMarathi", nameMarathi,
									"districtId", districtIdNew);
							int damCheckListDetails = delegator.storeByCondition("talukMaster", mapToSave, mainCond);
						} else {
							if (UtilValidate.isNotEmpty(value))
								value.clear();

							value = UtilMisc.toMap("talukId", talukIdNew, "status", status, "name", name, "nameMarathi",
									nameMarathi, "districtId", districtIdNew);

							GenericValue valueToStore = delegator.makeValue("talukMaster", value);
							valueToStore.create();
						}
					}
				}
			} catch (GenericEntityException e1) {
				result.clear();
				e1.printStackTrace();
			}

			catch (Exception e1) {
				result.clear();

				e1.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	public static String getTaluk(HttpServletRequest request, HttpServletResponse response)
			throws IOException, GenericEntityException {

		GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

		String districtId = request.getParameter("districtId");

		System.out.println("===============districtId" + districtId);

		List<EntityCondition> andExprs2 = FastList.newInstance();
		EntityCondition mainCond2 = null;
		List<GenericValue> talukMaster = FastList.newInstance();

		try {
			andExprs2.add(EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, districtId));
			mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);

			talukMaster = delegator.findList("talukMaster", mainCond2, null, null, null, false);

		} catch (Exception e) {
			e.printStackTrace();
		}

		JSONArray obj = new JSONArray(talukMaster);

		response.setContentType("application/json");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(obj);
		out.flush();

		return "success";
	}
	
	public static String getSubBasin(HttpServletRequest request, HttpServletResponse response)
			throws IOException, GenericEntityException {

		GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

		String basinId = request.getParameter("basinId");
		
		List<GenericValue> subBasinMaster = FastList.newInstance();
		try {
			subBasinMaster = delegator.findList("subBasinMaster",
					EntityCondition.makeCondition("basinId", EntityOperator.EQUALS, basinId), null, null, null, false);
		} catch (Exception e) {
			e.printStackTrace();
		}

		JSONArray obj = new JSONArray(subBasinMaster);

		response.setContentType("application/json");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(obj);
		out.flush();

		return "success";
	}

	public static Map<String, Object> submitStation(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String stationId = (String) context.get("stationId");
		String stationName = (String) context.get("stationName");
		String district = (String) context.get("district");
		String taluka = (String) context.get("taluka");

		String setup = (String) context.get("setup");
		String latitude = (String) context.get("latitude");
		String longitude = (String) context.get("longitude");

		String tributary = (String) context.get("tributary");
		String basin = (String) context.get("basin");
		String subBasin = (String) context.get("subBasin");
		String river = (String) context.get("river");
		String subDiv = (String) context.get("subDiv");

		try {
			if (UtilValidate.isNotEmpty(stationName)) {
				// String stationId=delegator.getNextSeqId("stationMaster");
				GenericValue stationMaster = delegator.makeValue("stationMaster",
						UtilMisc.toMap("stationId", stationId, "stationName", stationName, "district", district,
								"taluka", taluka, "setup", setup, "latitude", latitude, "longitude", longitude,
								"tributary", tributary, "basin", basin, "subBasin", subBasin, "river", river, "subDiv",
								subDiv, "status", "A"));

				stationMaster.create();
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static String getInspection(HttpServletRequest request, HttpServletResponse response)
			throws IOException, GenericEntityException {

		GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

		String mainCompId = request.getParameter("mainCompId");

		System.out.println("===============mainCompId" + mainCompId);

		List<EntityCondition> andExprs2 = FastList.newInstance();
		EntityCondition mainCond2 = null;
		List<GenericValue> inspList = FastList.newInstance();

		try {
			andExprs2.add(EntityCondition.makeCondition("mainComponent", EntityOperator.EQUALS, mainCompId));
			mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);

			inspList = delegator.findList("damGateCheckList", mainCond2, null, null, null, false);

		} catch (Exception e) {
			e.printStackTrace();
		}

		JSONArray obj = new JSONArray(inspList);

		response.setContentType("application/json");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(obj);
		out.flush();

		return "success";
	}

	// Added by Vaishnavi
	public static Map<String, Object> removeAssetMaster(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String structureId = (String) context.get("assId");
		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map structureMaster = null;
		System.out.println("===structureId=====" + structureId);
		System.out.println("===status=====" + status);
		System.out.println("===activestatus=====" + activestatus);

		try {
			if (status.equals("status")) {
				structureMaster = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("structureMaster")
						.where("structureId", structureId).queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("structureMaster", structureMaster,
						EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, structureId));
			}
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> removeTankGateCheckList(DispatchContext ctx,
			Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();
		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map damGateCheckList = null;

		String damGateCheckId = (String) context.get("damGateCheckId");
		System.out.println("+++++damGateCheckId+++++++=" + damGateCheckId);
		System.out.println("+++++activestatus+++++++=" + activestatus);
		System.out.println("+++++status+++++++=" + status);

		try {
			if (status.equals("status")) {
				damGateCheckList = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("damGateCheckList")
						.where("damGateCheckListId", damGateCheckId).queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("damGateCheckList", damGateCheckList,
						EntityCondition.makeCondition("damGateCheckListId", EntityOperator.EQUALS, damGateCheckId));
			}
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> removeloction(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();
		String status = (String) context.get("status");
		String activestatus = (String) context.get("activestatus");
		Map stationMaster = null;

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String stationId = (String) context.get("stationId");
		try {
			if (status.equals("status")) {
				stationMaster = UtilMisc.toMap("status", activestatus);
			}
			if (status.equals("delete")) {
				GenericValue assMaster = EntityQuery.use(delegator).from("stationMaster").where("stationId", stationId)
						.queryOne();
				assMaster.remove();
			} else {
				int valueToStore = delegator.storeByCondition("stationMaster", stationMaster,
						EntityCondition.makeCondition("stationId", EntityOperator.EQUALS, stationId));
			}
		} catch (Exception e) {
			System.out.println("error======================" + e);
		}

		return successResult;
	}

	public static Map<String, Object> UpdateLocation(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String stationId = (String) context.get("stationId");
		String district = (String) context.get("district");
		String stationType = (String) context.get("stationType");
		String latitude = (String) context.get("latitude");
		String longitude = (String) context.get("longitude");
		String taluka = (String) context.get("taluka");
		String basin = (String) context.get("basin");
		String subBasin = (String) context.get("subBasin");
		String river = (String) context.get("river");
		String tributary = (String) context.get("tributary");
		String subDiv = (String) context.get("subDiv");
		try {
			if (UtilValidate.isNotEmpty(stationId)) {
				System.out.print("ddddddddddddddddddddddd");
				Map mapToSave = UtilMisc.toMap("stationId", stationId, "district", district, "setup", stationType,
						"latitude", latitude, "longitude", longitude, "taluka", taluka, "basin", basin, "subBasin",
						subBasin, "river", river, "tributary", tributary, "subDiv", subDiv, "status", "A");
				int damCheckListDetails = delegator.storeByCondition("stationMaster", mapToSave,
						EntityCondition.makeCondition("stationId", EntityOperator.EQUALS, stationId));
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	// added by pratiksha

	public static Map<String, Object> saveOfficemap(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String idcName = (String) context.get("idcName");
		String regionName = (String) context.get("regionName");
		String circleName = (String) context.get("circleName");
		String divName = (String) context.get("divName");
		String subDivName = (String) context.get("subDivName");
		String damId = (String) context.get("damId");
		String oldidcName = (String) context.get("oldidcName");
		String oldregionName = (String) context.get("oldregionName");
		String oldcircleName = (String) context.get("oldcircleName");
		String olddivName = (String) context.get("olddivName");
		String officeId = (String) context.get("officeId");
		String remark = (String) context.get("remark");
		System.out.println("Current====================111111");
		// String officeName=(String) context.get("officeName");
		String userLoginId = (String) userLogin.get("userLoginId");
		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String estimateFile = (String) context.get("workFile");
		String ofbizHome = System.getProperty("user.dir")
				+ "/themes/rainbowstone/webapp/rainbowstone/pravah/UploadedFile";

		String tempFileNoValue = String.valueOf(Math.random());
		tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());
		String outFilePath = null;
		String outImagePath = null;

		/*
		 * SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss"); Date now =
		 * new Date(); String strDate = sdfDate.format(now);
		 */

		// String fileName=strDate+estimateFile;
		String fileName = estimateFile;

		try {
			// Code for Date
			/*
			 * SimpleDateFormat std2 = new SimpleDateFormat("dd/MM/yyyy"); //dd/MM/yyyy Date
			 * now2 = new Date(); System.out.println("now2====================now2"); String
			 * eeActiondate = std2.format(now2); java.util.Date eeActiond =
			 * std2.parse(eeActiondate);
			 * System.out.println("now2====================eeActiondate "+eeActiond);
			 */
			// End Code for Date

			if (UtilValidate.isNotEmpty(estimateFile)) {
				outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName);
				outImagePath = "/rainbowstone/pravah/UploadedFile/" + fileName;

				try {
					RandomAccessFile file = new RandomAccessFile(outFilePath, "rw");
					file.write(byteBufferValue.array());
				} catch (FileNotFoundException e) {
					Debug.logError(e, null);
				} catch (IOException e) {
					Debug.logError(e, null);
				}
				String seqId = delegator.getNextSeqId("damHandoverDetailLog", 1);

				GenericValue officeMap = delegator.makeValue("damHandoverDetailLog",
						UtilMisc.toMap("seqId", seqId, "damId", damId, "idcName", idcName, "regionName", regionName,
								"circleName", circleName, "divName", divName, "subDivName", subDivName, "oldidcName",
								oldidcName, "status", "Pending for SE approval", "oldregionName", oldregionName,
								"oldcircleName", oldcircleName, "olddivName", olddivName, "officeId", officeId,
								"Userid", userLoginId, "imagepath", outImagePath, "filepath", outFilePath, "remark",
								remark /* ,"eeActiond",eeActiond */));

				officeMap.create();

				if (UtilValidate.isNotEmpty(damId)) {

					Map mapToSave = UtilMisc.toMap("DamHandoverStatus", "Pending for SE approval");
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));

				}
			}
			// Code added for Notification
			List<EntityCondition> andExpr3 = FastList.newInstance();
			EntityCondition mainCond3 = null;
			andExpr3.add(EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));
			mainCond3 = EntityCondition.makeCondition(andExpr3, EntityOperator.AND);
			List<GenericValue> findList3 = FastList.newInstance();
			findList3 = delegator.findList("structureMaster", mainCond3, null, null, null, false);
			String structureName = null;
			if (UtilValidate.isNotEmpty(findList3)) {
				structureName = findList3.get(0).getString("structureName");
			}

			List<EntityCondition> andExpr4 = FastList.newInstance();
			EntityCondition mainCond4 = null;
			andExpr4.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, officeId));
			mainCond4 = EntityCondition.makeCondition(andExpr4, EntityOperator.AND);
			List<GenericValue> findList4 = FastList.newInstance();
			findList4 = delegator.findList("officeDetails", mainCond4, null, null, null, false);
			String TOffice = null;
			String name = null;
			if (UtilValidate.isNotEmpty(findList4)) {
				name = findList4.get(0).getString("fullOfficeName");
				TOffice = findList4.get(0).getString("parentOfficeID");
			}

			List<EntityCondition> andExpr5 = FastList.newInstance();
			EntityCondition mainCond5 = null;
			andExpr5.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, TOffice));
			mainCond5 = EntityCondition.makeCondition(andExpr5, EntityOperator.AND);
			List<GenericValue> findList5 = FastList.newInstance();
			findList5 = delegator.findList("officeDetails", mainCond5, null, null, null, false);
			String SE_name = null;
			if (UtilValidate.isNotEmpty(findList5)) {
				SE_name = findList5.get(0).getString("fullOfficeName");
			}

			java.sql.Date dateOfNot = null;
			SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");

			Date now = new Date();

			String strDate = sdf1.format(now);
			java.util.Date date = sdf1.parse(strDate);
			dateOfNot = new java.sql.Date(date.getTime());

			SimpleDateFormat formatter2 = new SimpleDateFormat("HH:mm:ss");  
			Date date2 = new Date();
			String time = formatter2.format(date2).toString();


			String seqId = delegator.getNextSeqId("NotifyDetails", 1);
			String SendMsg = "Request Send of Dam " + structureName + " to " + SE_name + " Office for Approval";
			String RecMsg = "Request Received of Dam " + structureName + " from " + name + " Office for Handover.";
			GenericValue log = delegator.makeValue("NotifyDetails",
					UtilMisc.toMap("seqId", seqId, "dam_id", damId, "Userid", userLoginId, "imagepath", outImagePath,
							"FromEE", officeId, "filepath", outFilePath, "remark", remark, "status", "A",
							"dateofnotify", dateOfNot, "TOffice", TOffice, "SendMsg", SendMsg, "RecMsg", RecMsg,"time",time));
			System.out.println("save++++++++++++++++++&&&&&&&&&");
			log.create();
			// End
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	// code for app handoverDam

	public static Map<String, Object> approveHandStatus(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String seqId = (String) context.get("seqId");
		String userLoginId = (String) userLogin.get("userLoginId");
		String officeId = (String) userLogin.get("officeId");
		String remark = (String) context.get("remark");
		String EnIdc = null;
		String MnIdc = null;
		String EnRe = null;
		String MnRe = null;
		String EnCi = null;
		String MnCi = null;
		String EnDivi = null;
		String MnDivi = null;
		String EnSubDivi = null;
		String MnSubDivi = null;

		try {

			if (UtilValidate.isNotEmpty(seqId)) {

				// To Find Dam Id
				List<EntityCondition> andExpr = FastList.newInstance();
				EntityCondition mainCond = null;
				andExpr.add(EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));
				mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);
				List<GenericValue> findList = FastList.newInstance();
				findList = delegator.findList("damHandoverDetailLog", mainCond, null, null, null, false);

				if (UtilValidate.isNotEmpty(findList)) {

					String damId = findList.get(0).getString("damId");
					System.out.print("damId==============" + damId);


					List<EntityCondition> andExpr3 = FastList.newInstance();
					EntityCondition mainCond3 = null;
					andExpr3.add(EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));
					mainCond3 = EntityCondition.makeCondition(andExpr3, EntityOperator.AND);
					List<GenericValue> findList3 = FastList.newInstance();
					findList3 = delegator.findList("structureMaster", mainCond3, null, null, null, false);
					String structureName = null;
					String OldDivOfficeId = null;
					if (UtilValidate.isNotEmpty(findList3)) {
						structureName = findList3.get(0).getString("structureName");
						OldDivOfficeId = findList3.get(0).getString("officeId");
					}


					String nIdc = findList.get(0).getString("idcName");
					String nRe = findList.get(0).getString("regionName");
					String nCi = findList.get(0).getString("circleName");
					String nDivi = findList.get(0).getString("divName");
					String nSubDivi = findList.get(0).getString("subDivName");

					// FOr Get Name and Mr Name For update in Office Type Master table
					List<EntityCondition> andExpr4 = FastList.newInstance();
					EntityCondition mainCond4 = null;
					andExpr4.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nIdc));
					mainCond4 = EntityCondition.makeCondition(andExpr4, EntityOperator.AND);
					List<GenericValue> findList4 = FastList.newInstance();
					findList4 = delegator.findList("officeDetails", mainCond4, null, null, null, false);
					if (UtilValidate.isNotEmpty(findList4)) {
						EnIdc = findList4.get(0).getString("fullOfficeName");
						MnIdc = findList4.get(0).getString("nameMR");
					}

					List<EntityCondition> andExpr5 = FastList.newInstance();
					EntityCondition mainCond5 = null;
					andExpr5.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nRe));
					mainCond5 = EntityCondition.makeCondition(andExpr5, EntityOperator.AND);
					List<GenericValue> findList5 = FastList.newInstance();
					findList5 = delegator.findList("officeDetails", mainCond5, null, null, null, false);
					if (UtilValidate.isNotEmpty(findList5)) {
						EnRe = findList5.get(0).getString("fullOfficeName");
						MnRe = findList5.get(0).getString("nameMR");
					}

					List<EntityCondition> andExpr6 = FastList.newInstance();
					EntityCondition mainCond6 = null;
					andExpr6.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nCi));
					mainCond6 = EntityCondition.makeCondition(andExpr6, EntityOperator.AND);
					List<GenericValue> findList6 = FastList.newInstance();
					findList6 = delegator.findList("officeDetails", mainCond6, null, null, null, false);
					if (UtilValidate.isNotEmpty(findList6)) {
						EnCi = findList6.get(0).getString("fullOfficeName");
						MnCi = findList6.get(0).getString("nameMR");
					}

					List<EntityCondition> andExpr7 = FastList.newInstance();
					EntityCondition mainCond7 = null;
					andExpr7.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nDivi));
					mainCond7 = EntityCondition.makeCondition(andExpr7, EntityOperator.AND);
					List<GenericValue> findList7 = FastList.newInstance();
					findList7 = delegator.findList("officeDetails", mainCond7, null, null, null, false);
					if (UtilValidate.isNotEmpty(findList7)) {
						EnDivi = findList7.get(0).getString("fullOfficeName");
						MnDivi = findList7.get(0).getString("nameMR");
					}

					/*
					 * List<EntityCondition> andExpr8 = FastList.newInstance(); EntityCondition
					 * mainCond8 = null;
					 * andExpr8.add(EntityCondition.makeCondition("OfficeID",EntityOperator.EQUALS,
					 * nSubDivi)); mainCond8 =
					 * EntityCondition.makeCondition(andExpr8,EntityOperator.AND);
					 * List<GenericValue> findList8 = FastList.newInstance();
					 * findList8=delegator.findList("officeDetails",mainCond8,null, null,
					 * null,false); if(UtilValidate.isNotEmpty(findList8)) { EnSubDivi =
					 * findList8.get(0).getString("fullOfficeName"); MnSubDivi =
					 * findList8.get(0).getString("nameMR"); }
					 */
					// End

					if (UtilValidate.isNotEmpty(damId)) {
						/*
						 * List<EntityCondition> andExpr3 = FastList.newInstance(); EntityCondition
						 * mainCond3 = null;
						 * andExpr3.add(EntityCondition.makeCondition("structureId",EntityOperator.
						 * EQUALS,damId)); mainCond3 =
						 * EntityCondition.makeCondition(andExpr3,EntityOperator.AND);
						 * List<GenericValue> findList3 = FastList.newInstance();
						 * findList3=delegator.findList("structureMaster",mainCond3,null, null,
						 * null,false); // Old nbasinId details String basinId =
						 * findList3.get(0).getString("basinId"); String subBasinId =
						 * findList3.get(0).getString("subBasinId"); String officeIdOld =
						 * findList3.get(0).getString("officeId"); // End
						 */
						System.out.print("Start ==============");
						Map mapToSave1 = UtilMisc.toMap("DamHandoverStatus", "", "officeId", nDivi);
						int damCheckListDetails1 = delegator.storeByCondition("structureMaster", mapToSave1,
								EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));

						Map mapToSave2 = UtilMisc.toMap("idcName", nIdc, "regionName", nRe, "circleName", nCi,
								"divName", nDivi, "subDivName", nSubDivi, "parent_id", nDivi, "office_corporation_name",
								EnIdc, "office_corporation_namemr", MnIdc, "office_region_name", EnRe,
								"office_region_namemr", MnRe, "office_circle_name", EnCi, "office_circle_namemr", MnCi,
								"office_division_name", EnDivi, "office_division_namemr", MnDivi);
						int damCheckListDetails2 = delegator.storeByCondition("structureMasterType", mapToSave2,
								EntityCondition.makeCondition("damId", EntityOperator.EQUALS, damId));
						System.out.print("End ==============");

						// For Status Saving in Main "damHandoverDetailLog" Table
						Map mapToSave = UtilMisc.toMap("status", "Approved", "approvedBy", userLoginId,
								"approvedOfficeId", officeId, "remark", remark);
						int damCheckListDetails = delegator.storeByCondition("damHandoverDetailLog", mapToSave,
								EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));
						// End
					}

					// Code for Notify
					java.sql.Date dateOfNot = null;
					SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
					Date now = new Date();

					String strDate = sdf1.format(now);
					java.util.Date date = sdf1.parse(strDate);
					dateOfNot = new java.sql.Date(date.getTime());

					SimpleDateFormat formatter2 = new SimpleDateFormat("HH:mm:ss");  
					Date date2 = new Date();
					String time = formatter2.format(date2).toString();

					String seqId1 = delegator.getNextSeqId("NotifyDetails", 1);
					String SendMsg = "Request for handover Dam " + structureName + " has been Approved and handover to "+EnDivi+" office.";
					String RecMsg = "Request for handover Dam " + structureName + " has been Approved and handover to "+EnDivi+" office.";
					GenericValue log = delegator.makeValue("NotifyDetails",
							UtilMisc.toMap("seqId", seqId1, "dam_id", damId, "Userid", userLoginId,
									"FromEE", officeId, "remark", remark, "status", "A",
									"dateofnotify", dateOfNot, "TOffice", OldDivOfficeId, "SendMsg", SendMsg, "RecMsg", RecMsg,"time",time));
					System.out.println("save++++++++++++++++++&&&&&&&&&");
					log.create();



					String seqId2 = delegator.getNextSeqId("NotifyDetails", 1);
					GenericValue log2 = delegator.makeValue("NotifyDetails",
							UtilMisc.toMap("seqId", seqId2, "dam_id", damId, "Userid", userLoginId,
									"FromEE", officeId, "remark", remark, "status", "A",
									"dateofnotify", dateOfNot, "TOffice", nDivi, "SendMsg", SendMsg, "RecMsg", RecMsg,"time",time));
					System.out.println("save++++++++++++++++++&&&&&&&&&");
					log2.create();
					// End
				}

			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	// code for Rej handoverDam

	public static Map<String, Object> rejHandStatus(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");
		String seqId = (String) context.get("seqId");
		String userLoginId = (String) userLogin.get("userLoginId");
		String officeId = (String) userLogin.get("officeId");
		String remark = (String) context.get("remark");
		System.out.println("+++++++++++++++++++" + remark);
		try {

			if (UtilValidate.isNotEmpty(seqId)) {

				Map mapToSave = UtilMisc.toMap("status", "Rejected", "approvedBy", userLoginId, "approvedOfficeId",
						officeId, "remark", remark);
				int damCheckListDetails = delegator.storeByCondition("damHandoverDetailLog", mapToSave,
						EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));

				// To Find Dam Id
				List<EntityCondition> andExpr = FastList.newInstance();
				EntityCondition mainCond = null;
				andExpr.add(EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));
				mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);
				List<GenericValue> findList = FastList.newInstance();
				findList = delegator.findList("damHandoverDetailLog", mainCond, null, null, null, false);

				if (UtilValidate.isNotEmpty(findList)) {

					String damId = findList.get(0).getString("damId");
					String nIdc = findList.get(0).getString("idcName");
					String nRe = findList.get(0).getString("regionName");
					String nCi = findList.get(0).getString("circleName");
					String nDivi = findList.get(0).getString("divName");
					String nSubDivi = findList.get(0).getString("subDivName");

					if (UtilValidate.isNotEmpty(damId)) {
						Map mapToSave1 = UtilMisc.toMap("DamHandoverStatus", "");
						int damCheckListDetails1 = delegator.storeByCondition("structureMaster", mapToSave1,
								EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));

					}

					// Code for Notify
					java.sql.Date dateOfNot = null;
					SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
					Date now = new Date();

					List<EntityCondition> andExpr3 = FastList.newInstance();
					EntityCondition mainCond3 = null;
					andExpr3.add(EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));
					mainCond3 = EntityCondition.makeCondition(andExpr3, EntityOperator.AND);
					List<GenericValue> findList3 = FastList.newInstance();
					findList3 = delegator.findList("structureMaster", mainCond3, null, null, null, false);
					String structureName = null;
					String OldDivOfficeId = null;
					if (UtilValidate.isNotEmpty(findList3)) {
						structureName = findList3.get(0).getString("structureName");
						OldDivOfficeId = findList3.get(0).getString("officeId");
					}

					String strDate = sdf1.format(now);
					java.util.Date date = sdf1.parse(strDate);
					dateOfNot = new java.sql.Date(date.getTime());

					SimpleDateFormat formatter2 = new SimpleDateFormat("HH:mm:ss");  
					Date date2 = new Date();
					String time = formatter2.format(date2).toString();

					String seqId1 = delegator.getNextSeqId("NotifyDetails", 1);
					String SendMsg = "Request for handover Dam " + structureName + " has been Rejected.";
					String RecMsg = "Request for handover Dam " + structureName + " has been Rejected.";
					GenericValue log = delegator.makeValue("NotifyDetails",
							UtilMisc.toMap("seqId", seqId1, "dam_id", damId, "Userid", userLoginId,
									"FromEE", officeId, "remark", remark, "status", "A",
									"dateofnotify", dateOfNot, "TOffice", OldDivOfficeId, "SendMsg", SendMsg, "RecMsg", RecMsg,"time",
									time));
					System.out.println("save++++++++++++++++++&&&&&&&&&");
					log.create();
					// End

				}
			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> notify(DispatchContext ctx, Map<String, ? extends Object> context)
			throws ParseException {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String damId = (String) context.get("dam_id");
		System.out.println("+++++++++++++++++++++++==damId++++++" + damId);
		String remark = (String) context.get("remark");
		String userLoginId = (String) userLogin.get("userLoginId");
		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String estimateFile = (String) context.get("workFile");
		String ofbizHome = System.getProperty("user.dir")
				+ "/themes/rainbowstone/webapp/rainbowstone/pravah/UploadedFile";
		String dam_id = (String) context.get("dam_id");
		String officeId = (String) userLogin.get("officeId");

		String tempFileNoValue = String.valueOf(Math.random());
		tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());
		String outFilePath = null;
		String outImagePath = null;
		String fileName = estimateFile;

		java.sql.Date dateOfNot = null;
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");

		Date now = new Date();

		String strDate = sdf1.format(now);
		java.util.Date date = sdf1.parse(strDate);
		dateOfNot = new java.sql.Date(date.getTime());


		System.out.println("New date+++++++++++++++++++++++++============" + dateOfNot);
		try {
			if (UtilValidate.isNotEmpty(estimateFile)) {
				outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName);
				outImagePath = "/rainbowstone/pravah/UploadedFile/" + fileName;

				try {
					System.out.println("+++++++inner try+++++++++++++++++");
					RandomAccessFile file = new RandomAccessFile(outFilePath, "rw");
					file.write(byteBufferValue.array());
				} catch (FileNotFoundException e) {
					Debug.logError(e, null);
				} catch (IOException e) {
					Debug.logError(e, null);
				}

				List<EntityCondition> andExpr3 = FastList.newInstance();
				EntityCondition mainCond3 = null;
				andExpr3.add(EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));
				mainCond3 = EntityCondition.makeCondition(andExpr3, EntityOperator.AND);
				List<GenericValue> findList3 = FastList.newInstance();
				findList3 = delegator.findList("structureMaster", mainCond3, null, null, null, false);
				String structureName = null;
				String DivOfficeId = null;
				if (UtilValidate.isNotEmpty(findList3)) {
					structureName = findList3.get(0).getString("structureName");
					DivOfficeId = findList3.get(0).getString("officeId");
				}

				String SendMsg = "Request Initiated for handover Dam " + structureName + ".";
				String RecMsg = "Request Recieved for handover Dam " + structureName + ".";
				String seqId = delegator.getNextSeqId("NotifyDetails", 1);

				SimpleDateFormat formatter2 = new SimpleDateFormat("HH:mm:ss");  
				Date date2 = new Date();
				String time = formatter2.format(date2).toString();

				GenericValue log = delegator.makeValue("NotifyDetails",
						UtilMisc.toMap("seqId", seqId, "dam_id", dam_id, "Userid", userLoginId, "imagepath",
								outImagePath, "FromEE", officeId, "filepath", outFilePath, "remark", remark, "status",
								"A", "TOffice", DivOfficeId, "dateofnotify", dateOfNot,"RecMsg",RecMsg, "SendMsg", SendMsg,"time",time));
				System.out.println("save++++++++++++++++++&&&&&&&&&");
				log.create();
				System.out.println("save123++++++++++++++++++&&&&&&&&&");
				if (UtilValidate.isNotEmpty(damId)) {

					Map mapToSave = UtilMisc.toMap("HandNotifStatus", "A");
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));
					System.out.println("updated++++++++++++++++++&&&&&&&&&");

				}

			}
		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	// demo
	public static Map<String, Object> DemoReg(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		System.out.println("===================== Test ===================");
		String fname = (String) context.get("fname");
		String address = (String) context.get("address");

		try {
			System.out.println("===================== I am        Try  ===================");

			String seqId = delegator.getNextSeqId("LoginDetailsTestAA", 1);

			GenericValue log = delegator.makeValue("LoginDetailsTestAA",
					UtilMisc.toMap("seqId", seqId, "name", fname, "address", address));

			log.create();

		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> UpdateDemo(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String seqId = (String) context.get("seqId");
		String fname = (String) context.get("fname");
		String address = (String) context.get("address");

		try {

			if (UtilValidate.isNotEmpty(seqId)) {
				Map mapToSave = UtilMisc.toMap("name", fname, "address", address);
				int damCheckListDetails = delegator.storeByCondition("LoginDetailsTestAA", mapToSave,
						EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));
			}

		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}

	public static Map<String, Object> deleteTest(DispatchContext ctx, Map<String, ? extends Object> context) {
		Delegator delegator = ctx.getDelegator();
		LocalDispatcher dispatcher = ctx.getDispatcher();
		Locale locale = (Locale) context.get("locale");
		Map<String, Object> successResult = ServiceUtil.returnSuccess();

		GenericValue userLogin = (GenericValue) context.get("userLogin");

		String seqId = (String) context.get("seqId");
		System.out.print("error====deleteTest==========" + seqId);
		try {

			if (UtilValidate.isNotEmpty(seqId)) {
				GenericValue removeData = EntityQuery.use(delegator).from("LoginDetailsTestAA").where("seqId", seqId)
						.queryOne();
				removeData.remove();
			}

		} catch (Exception e) {
			System.out.print("error==============" + e);
		}
		return successResult;
	}
	//added for exel upload
	
	/*public synchronized static Map<String, Object> importDataForMaster(DispatchContext dctx, Map<String, Object> context)
			throws IOException, ParseException {

		LocalDispatcher dispatcher = dctx.getDispatcher();
		GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
		Map<String, Object> result = ServiceUtil.returnSuccess();
		Locale locale = (Locale) context.get("locale");
		GenericValue userLogin = (GenericValue) context.get("userLogin");
		
		ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
		String fileExtension = (String) context.get("fileExtension");
		try {

			// Code added for Write Excel file in ofbiz Release
			String outFilePath = null;
			try {

				// Call Run Sync Service uploadFileForImport and uploadFile method
				Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
						UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
				System.out.println("************^^^^^Saved Successfully^^^^^^^********");
				if (UtilValidate.isNotEmpty(fileUploadMap))
					// get saved file path In outFilePath
					outFilePath = (String) fileUploadMap.get("outFilePath");
				
				FileInputStream excelFile = new FileInputStream(new File(outFilePath));
				XSSFWorkbook book = new XSSFWorkbook(excelFile);
				XSSFSheet sheet = book.getSheetAt(0);
				int noOfRows = sheet.getLastRowNum();
				System.out.println("======noOfRows===="+noOfRows);
				
				// Code for upload
					for (int i = 1; i <= noOfRows; i++) {
					
					String damId = sheet.getRow(i).getCell(0).toString();
					String project_id = sheet.getRow(i).getCell(1).toString();
					String revenue_region_id = sheet.getRow(i).getCell(2).toString();
					// String data_operator_mobile_number = sheet.getRow(i).getCell(3).toString();
					
					StringBuffer sb= new StringBuffer(damId);  
					sb=sb.deleteCharAt(sb.length()-1);
					sb=sb.deleteCharAt(sb.length()-1);
					String damIdN = sb.toString();
					System.out.println("======idamIdN==========="+damId);
					System.out.println("======idamIdN==========="+damIdN);
					
					StringBuffer revenue_region_id_SB = new StringBuffer(revenue_region_id);  
					revenue_region_id_SB=revenue_region_id_SB.deleteCharAt(revenue_region_id_SB.length()-1);
					revenue_region_id_SB=revenue_region_id_SB.deleteCharAt(revenue_region_id_SB.length()-1);
					String revenueId = revenue_region_id_SB.toString();
					
					System.out.println("======revenueId============"+revenueId);
					
					if (UtilValidate.isNotEmpty(damIdN)) {
						
						System.out.println("======i============"+i);
						
						Map mapToSaveDam = UtilMisc.toMap("revenueregion",revenueId);
						int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSaveDam,
								EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damIdN));
						System.out.println("======Update Successfully====");
					}
					//
					
				}
				book.close();
				// End
			       
			} catch (GenericServiceException e1) {

				e1.printStackTrace();
			}

		// End
		} 
		 
		catch (Exception e) {
			Debug.log("Exception occured :LKHLLHJELLO");
			e.printStackTrace();
		}
		return result;
	}
	// End
*/
	// Upload Excel File into Release

		public static Map<String, Object> uploadFileServiceForMaster(DispatchContext dctx, Map<String, Object> context) {
			Map<String, Object> result = ServiceUtil.returnSuccess();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			// get Parameters from Service
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("byteBufferValue");
			String fileExtension = (String) context.get("fileExtension");

			// set Directory path
			String ofbizHome = System.getProperty("user.dir") + "/framework/images/webapp/images/Excel";
			// end

			// Code for generate Unique File Name with File Path
			String tempFileNoValue = String.valueOf(Math.random());
			String tempFileNameVal = String.valueOf(new java.sql.Timestamp(System.currentTimeMillis()));
			tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());

			String fileName = "damMaster" + tempFileNameVal;

			String outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName) + "." + fileExtension;
			// End
			
			context.put("outFilePath", outFilePath);

			// Code for Write xls File
			try {
				RandomAccessFile file = new RandomAccessFile(outFilePath, "rw");
				file.write(byteBufferValue.array());
			} catch (FileNotFoundException e) {
			} catch (IOException e) {
			}

			result.put("outFilePath", outFilePath);

			return result;
		}
		// End

		/*public synchronized static Map<String, Object> importExcelDataScheduleBDamPur(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					System.out.println("************^^^^^Saved Successfully^^^^^^^********");
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath
						outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);
					int noOfRows = sheet.getLastRowNum();
					System.out.println("======noOfRows===="+noOfRows);
					
					// Code for upload
						for (int i = 1; i <= noOfRows; i++) {
						
						String damId = sheet.getRow(i).getCell(0).toString();
						String project_id = sheet.getRow(i).getCell(1).toString();
						String revenue_region_id = sheet.getRow(i).getCell(2).toString();
						String data_operator_mobile_number = sheet.getRow(i).getCell(3).toString();
						
					}
					book.close();
					// End
				       
				} catch (GenericServiceException e1) {

					e1.printStackTrace();
				}

			// End
			} 
			 
			catch (Exception e) {
				Debug.log("Exception occured :LKHLLHJELLO");
				e.printStackTrace();
			}
			return result;
		}*/
		// End
	
		/*public synchronized static Map<String, Object> importDataForMaster1(DispatchContext dctx, Map<String, Object> context)
		throws IOException, ParseException {

	LocalDispatcher dispatcher = dctx.getDispatcher();
	GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
	Map<String, Object> result = ServiceUtil.returnSuccess();
	Locale locale = (Locale) context.get("locale");
	GenericValue userLogin = (GenericValue) context.get("userLogin");
	
	ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
	String fileExtension = (String) context.get("fileExtension");
	try {

		// Code added for Write Excel file in ofbiz Release
		String outFilePath = null;
		try {

			// Call Run Sync Service uploadFileForImport and uploadFile method
			Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
					UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
			if (UtilValidate.isNotEmpty(fileUploadMap))
				// get saved file path In outFilePath

			outFilePath = (String) fileUploadMap.get("outFilePath");
			
			FileInputStream excelFile = new FileInputStream(new File(outFilePath));
			XSSFWorkbook book = new XSSFWorkbook(excelFile);
			XSSFSheet sheet = book.getSheetAt(0);

			int noOfRows = sheet.getLastRowNum();
			
			// Code for upload
				for (int i = 1; i <= noOfRows; i++) {

				String gross_storage_inmcum = sheet.getRow(i).getCell(0).toString();
				BigDecimal BigDe_gross_storage = new BigDecimal(gross_storage_inmcum); 
			    
				String rl_inm= sheet.getRow(i).getCell(1).toString();
				BigDecimal BigDe_rl_inm = new BigDecimal(rl_inm);
				
				String water_spread_insqkm = sheet.getRow(i).getCell(2).toString();
				BigDecimal BigDe_water_spread_insqkm = new BigDecimal(water_spread_insqkm);
				
			    String dam_id = sheet.getRow(i).getCell(3).toString();
			    String storage_level_type_id = sheet.getRow(i).getCell(4).toString();
			  
			   	StringBuffer sb= new StringBuffer(dam_id);  
				sb=sb.deleteCharAt(sb.length()-1);
				sb=sb.deleteCharAt(sb.length()-1);
				String damIdN = sb.toString();
				System.out.println("======noOfRows===="+noOfRows);
				
			   	if (UtilValidate.isNotEmpty(dam_id)) {
					String capacityId = delegator.getNextSeqId("damContentCapacity", 1);

					GenericValue Capacitydetail = delegator.makeValue("damContentCapacity",
							UtilMisc.toMap("capacityId", capacityId, "grossStorageInMcum", BigDe_gross_storage, "rlInM",BigDe_rl_inm
									, "waterSpreadInSqkm", BigDe_water_spread_insqkm, "damId", damIdN, "storageLevelTypeId", storage_level_type_id));

					Capacitydetail.create();
					System.out.println("======i saved sucess==========="+i);
				}
			
			}
			book.close();
			// End
		       
		} catch (GenericServiceException e1) {

			e1.printStackTrace();
		}

	// End
	} 
	 
	catch (Exception e) {
		Debug.log("Exception occured :LKHLLHJELLO");
		e.printStackTrace();
	}
	return result;
}*/
// End

		public static Map<String, Object> Highimpdamyes(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			String structureId = (String) context.get("assId");
			String status = (String) context.get("status");
			String activestatus = (String) context.get("activestatus");
			Map structureMaster = null;
			System.out.println("===structureId=====" + structureId);
			System.out.println("===status=====" + status);
			System.out.println("===activestatus=====" + activestatus);


			try {
				System.out.println("===try=====");

				if (UtilValidate.isNotEmpty(structureId)) {
					System.out.println("===if=====");

					Map mapToSave = UtilMisc.toMap("HighImportanceDam", "Y");
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, structureId));
					System.out.println("updated++++++++++++++++++&&&&&&&&&");

				}
				}
			 catch (Exception e) {
				System.out.println("error======================" + e);
			}

			return successResult;
		}	

		public static Map<String, Object> HighimpdamNo(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			String structureId = (String) context.get("assId");
			String status = (String) context.get("status");
			String activestatus = (String) context.get("activestatus");
			Map structureMaster = null;
			System.out.println("===structureId=====" + structureId);
			System.out.println("===status=====" + status);
			System.out.println("===activestatus=====" + activestatus);


			try {
				System.out.println("===try=====");

				if (UtilValidate.isNotEmpty(structureId)) {
					System.out.println("===if=====");

					Map mapToSave = UtilMisc.toMap("HighImportanceDam", "N");
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, structureId));
					System.out.println("updated++++++++++++++++++&&&&&&&&&");

				}
				}
			 catch (Exception e) {
				System.out.println("error======================" + e);
			}

			return successResult;
		}	

		/*public synchronized static Map<String, Object> uploadexelFileForProjectJava(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath

					outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);

					int noOfRows = sheet.getLastRowNum();
					
					// Code for upload
					int j=0;
						for (int i = 1; i <= noOfRows; i++) {

					    String dam_id = sheet.getRow(i).getCell(0).toString();
					   	StringBuffer sb= new StringBuffer(dam_id);  
						sb=sb.deleteCharAt(sb.length()-1);
						sb=sb.deleteCharAt(sb.length()-1);
						String damIdN = sb.toString();
						String english = sheet.getRow(i).getCell(1).toString();
						String marathi = sheet.getRow(i).getCell(2).toString();
						
					   	if (UtilValidate.isNotEmpty(dam_id)) {

					   		Map mapToSaveDam = UtilMisc.toMap("projectstatus",english,"projectstatusMr",marathi);
							int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSaveDam,
									EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damIdN));
							j=j+1;
							System.out.println("======Update Successfully===="+j+"==");
							
					   	}
					
					}
						//book.close();
						// End
					       
					} catch (GenericServiceException e1) {

						e1.printStackTrace();
					}

				// End
				} 
				 
				catch (Exception e) {
					Debug.log("Exception occured :LKHLLHJELLO");
					e.printStackTrace();
				}
				return result;
			}*/

		public static Map<String, Object> saveReservoirMaster(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String resId = (String) context.get("resId");
			String resIdE = (String) context.get("resIdE");
			String resIdM = (String) context.get("resIdM");
			
			try {
				String seqId = delegator.getNextSeqId("reservoirMaster", 1);
					GenericValue structureList = delegator.makeValue("reservoirMaster", UtilMisc.toMap("seqId",seqId,"reservoirID",
							resId, "reservoirName", resIdE,"reservoirNameMr",resIdM,"status","A"));
							
					structureList.create();
						

			} catch (Exception e) {
				System.err.println("------------------------------error-----------" + e);
			}
			return successResult;
		}

		public static Map<String, Object> projectStatusMasterSave(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String projectSId = (String) context.get("projectSId");
			String projectSE = (String) context.get("projectSE");
			String projectSM = (String) context.get("projectSM");
			
			try {
				String seqId = delegator.getNextSeqId("projectStatusMaster", 1);
					GenericValue structureList = delegator.makeValue("projectStatusMaster", UtilMisc.toMap("seqId",seqId,"projectSId",
							projectSId, "projectStatusEnglish", projectSE,"projectStatusMr",projectSM,"status","A"));
							
					structureList.create();
						

			} catch (Exception e) {
				System.err.println("------------------------------error-----------" + e);
			}
			return successResult;
		}

		/*public synchronized static Map<String, Object> projectMasterSave(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					System.out.println("************^^^^^Saved Successfully^^^^^^^********");
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath
						outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);
					int noOfRows = sheet.getLastRowNum();
					System.out.println("======noOfRows===="+noOfRows);
					
					for (int i = 1; i <= noOfRows; i++) {
						
						String id = sheet.getRow(i).getCell(0).toString();
						String name = sheet.getRow(i).getCell(1).toString();
						String nameMR = sheet.getRow(i).getCell(2).toString();
						String project_ownership_id = sheet.getRow(i).getCell(3).toString();
						String project_status_id = sheet.getRow(i).getCell(4).toString();
						String project_type_id = sheet.getRow(i).getCell(5).toString();
						
						StringBuffer sb= new StringBuffer(id);  
						sb=sb.deleteCharAt(sb.length()-1);
						sb=sb.deleteCharAt(sb.length()-1);
						String damIdN = sb.toString();
						
						System.out.println("======damIdN============"+damIdN);
						
						if (UtilValidate.isNotEmpty(damIdN)) {
							
							System.out.println("======i============"+i);
							String seqId = delegator.getNextSeqId("projectMaster", 1);
							GenericValue structureList = delegator.makeValue("projectMaster", UtilMisc.toMap("seqId",seqId,"projectId",
									damIdN, "projectName", name,"projectNameMr",nameMR,"project_ownership_id",project_ownership_id,
									"project_status_id",project_status_id,"project_type_id",project_type_id,"status","A"));
									
							structureList.create();
							System.out.println("======saved Successfully====");
						}
						//
						
					}
				       
				} catch (GenericServiceException e1) {

					e1.printStackTrace();
				}

			// End
			} 
			 
			catch (Exception e) {
				Debug.log("Exception occured :LKHLLHJELLO");
				e.printStackTrace();
			}
			return result;
		}*/
		
		public static Map<String, Object> storageCreationStatusSave(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String projectSId = (String) context.get("projectSId");
			String projectSE = (String) context.get("projectSE");
			String projectSM = (String) context.get("projectSM");
			
			try {
				String seqId = delegator.getNextSeqId("storageCreationStatus", 1);
					GenericValue structureList = delegator.makeValue("storageCreationStatus", UtilMisc.toMap("seqId",seqId,"SId",
							projectSId, "StatusEnglish", projectSE,"StatusMr",projectSM,"status","A"));
							
					structureList.create();
						

			} catch (Exception e) {
				System.err.println("------------------------------error-----------" + e);
			}
			return successResult;
		}
		
		//Added By Madhavi
		public static Map<String, Object> saveRTDAS (DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String damid = (String) context.get("damid");

			System.out.println("===============damid==============" + damid);

			String stationid = (String) context.get("stationid");
			System.out.println("================stationid==============" + stationid);



			try {

				if (UtilValidate.isNotEmpty(stationid)) {
					Map mapToSave = UtilMisc.toMap("damId", damid);
					int damCheckListDetails = delegator.storeByCondition("stationMaster", mapToSave,
							EntityCondition.makeCondition("stationId", EntityOperator.EQUALS, stationid));
				}

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
		
		
		public static Map<String, Object> saveRTDASIDStructuremaster (DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String damid = (String) context.get("damid");

			System.out.println("===============damid==============" + damid);

			String stationId = (String) context.get("stationId");
			System.out.println("================stationid==============" + stationId);



			try {

				if (UtilValidate.isNotEmpty(damid)) {
					Map mapToSave = UtilMisc.toMap("RTDASId", stationId);
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damid));
				}

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
		
		
		//Added by Pratiksha
		
		/*public synchronized static Map<String, Object> loginMasterSave(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					System.out.println("************^^^^^Saved Successfully^^^^^^^********");
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath
						outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);
					int noOfRows = sheet.getLastRowNum();
					System.out.println("======noOfRows===="+noOfRows);
					
					for (int i = 1; i <= noOfRows; i++) {
						
						String id = sheet.getRow(i).getCell(0).toString();
						System.out.println("_______id________"+id);
						
						String email_id=null;
						String first_name=null;
						String first_namemr=null;
						String last_name=null;
						String last_namemr =null;
						String middle_name=null;
						String middle_namemr=null;
						String phone_number=null;
						String retirement_date =null;
						String circle_id=null;
						String corporation_id=null;
						String division_id =null;
						String mantralaya_id=null;
						String office_id =null;
						String post_id =null;
						String region_id=null;
						String sub_post_id=null;
						String aadhaar=null;
						String active=null;
						if(sheet.getRow(i).getCell(1)==null)
						{
							
						}
						else
						{
							aadhaar = sheet.getRow(i).getCell(1).toString();
						}
						if(sheet.getRow(i).getCell(2)==null)
						{
							
						}
						else
						{
							active = sheet.getRow(i).getCell(2).toString();
						}
						if(sheet.getRow(i).getCell(3)==null) {
							
						}
						else
						{
							 email_id = sheet.getRow(i).getCell(3).toString();
						}
						if(sheet.getRow(i).getCell(4)==null)
						{
							
						}
						else
						{
							 first_name = sheet.getRow(i).getCell(4).toString();
						}
						if(sheet.getRow(i).getCell(5)==null)
						{
							
						}
						else
						{
							first_namemr = sheet.getRow(i).getCell(5).toString();
						}
						if(sheet.getRow(i).getCell(6)==null)
						{
							
						}
						else
						{
						  last_name = sheet.getRow(i).getCell(6).toString();
						}
						if(sheet.getRow(i).getCell(7)==null)
						{
							
						}
						else
						{
							last_namemr = sheet.getRow(i).getCell(7).toString();
						}
						if(sheet.getRow(i).getCell(8)==null)
						{
							
						}
						else
						{
							middle_name = sheet.getRow(i).getCell(8).toString();
						}
						if(sheet.getRow(i).getCell(9)==null)
						{
							
						}
						else
						{
						  middle_namemr = sheet.getRow(i).getCell(9).toString();
						}
						if(sheet.getRow(i).getCell(10)==null)
						{
							
						}
						else
						{
							phone_number = sheet.getRow(i).getCell(10).toString();
						}
						if(sheet.getRow(i).getCell(11)==null)
						{
							
						}
						else
						{
							retirement_date = sheet.getRow(i).getCell(11).toString();
						}
						if(sheet.getRow(i).getCell(12)==null)
						{
							
						}
						else
						{
							circle_id = sheet.getRow(i).getCell(12).toString();
						}
						if(sheet.getRow(i).getCell(13)==null)
						{
							
						}
						else
						{
							corporation_id = sheet.getRow(i).getCell(13).toString();
						}
						if(sheet.getRow(i).getCell(14)==null)
						{
							
						}
						else
						{
							division_id = sheet.getRow(i).getCell(14).toString();
						}
						if(sheet.getRow(i).getCell(15)==null)
						{
							
						}
						else
						{
							mantralaya_id = sheet.getRow(i).getCell(15).toString();
						}
						if(sheet.getRow(i).getCell(16)==null)
						{
							
						}
						else
						{
							office_id = sheet.getRow(i).getCell(16).toString();
						}
						if(sheet.getRow(i).getCell(17)==null)
						{
							
						}
						else
						{
							post_id = sheet.getRow(i).getCell(17).toString();
						}
						if(sheet.getRow(i).getCell(18)==null)
						{
							
						}
						else
						{
							region_id = sheet.getRow(i).getCell(18).toString();
						}
						if(sheet.getRow(i).getCell(19)==null)
						{
							
						}
						else
						{
							sub_post_id = sheet.getRow(i).getCell(19).toString();
						}
						
						System.out.println("_______sub_post_id_______"+sub_post_id);
						
						StringBuffer sb= new StringBuffer(id);  
						sb=sb.deleteCharAt(sb.length()-1);
						sb=sb.deleteCharAt(sb.length()-1);
						String damIdN = sb.toString();
						
						
						if (UtilValidate.isNotEmpty(id)) {
							
							System.out.println("======i============"+i);
							String seqId = delegator.getNextSeqId("muser_Backup_Pierian", 1);
							GenericValue loginMasterList = delegator.makeValue("muser_Backup_Pierian", UtilMisc.toMap("seqId",seqId,"id",
									id, "aadhaar", aadhaar,"active",active,"email_id",email_id,
									"first_name",first_name,"first_namemr",first_namemr,"last_name",last_name
									,"last_namemr",last_namemr,"middle_name",middle_name,"middle_namemr",middle_namemr
									,"phone_number",phone_number,"retirement_date1",retirement_date,"circle_id",circle_id
									,"corporation_id",corporation_id,"division_id",division_id,"mantralaya_id",mantralaya_id
									,"office_id",office_id,"post_id",post_id,"region_id",region_id,"sub_post_id",sub_post_id));
									
							loginMasterList.create();
							System.out.println("======saved Successfully====");
						}
						//
						
					}
				       
				} catch (GenericServiceException e1) {

					e1.printStackTrace();
				}

			// End
			} 
			 
			catch (Exception e) {
				Debug.log("Exception occured :LKHLLHJELLO");
				e.printStackTrace();
			}
			return result;
		}*/
		

		/*public synchronized static Map<String, Object> accountDetailsSave(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					System.out.println("************^^^^^Saved Successfully^^^^^^^********");
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath
						outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);
					int noOfRows = sheet.getLastRowNum();
					System.out.println("======noOfRows===="+noOfRows);
					
					for (int i = 1; i <= noOfRows; i++) {
						
						String id = sheet.getRow(i).getCell(0).toString();
						StringBuffer sb= new StringBuffer(id);  
						sb=sb.deleteCharAt(sb.length()-1);
						sb=sb.deleteCharAt(sb.length()-1);
						id = sb.toString();
						System.out.println("_______id________"+id);
						String account_id=null;
						String account_secret= null;
						String otp = null;
						String usermeta_id = null;
						String citizen_id = null;
						String super_user_id = null; 
						String password_change_required = null;
						String first_timeregistration = null;
						
						if(sheet.getRow(i).getCell(1)==null)
						{
							
						}
						else
						{
							account_id = sheet.getRow(i).getCell(1).toString();
						}
						if(sheet.getRow(i).getCell(2)==null)
						{
							
						}
						else
						{
							account_secret = sheet.getRow(i).getCell(2).toString();
						}
						if(sheet.getRow(i).getCell(3)==null) {
							
						}
						else
						{
							otp = sheet.getRow(i).getCell(3).toString();
						}
						if(sheet.getRow(i).getCell(4)==null)
						{
							
						}
						else
						{
							usermeta_id = sheet.getRow(i).getCell(4).toString();
						}
						if(sheet.getRow(i).getCell(5)==null)
						{
							
						}
						else
						{
							citizen_id = sheet.getRow(i).getCell(5).toString();
						}
						if(sheet.getRow(i).getCell(6)==null)
						{
							
						}
						else
						{
							super_user_id = sheet.getRow(i).getCell(6).toString();
						}
						if(sheet.getRow(i).getCell(7)==null)
						{
							
						}
						else
						{
							password_change_required = sheet.getRow(i).getCell(7).toString();
						}
						if(sheet.getRow(i).getCell(8)==null)
						{
							
						}
						else
						{
							first_timeregistration = sheet.getRow(i).getCell(8).toString();
						}
						
						
						StringBuffer sb= new StringBuffer(id);  
						sb=sb.deleteCharAt(sb.length()-1);
						sb=sb.deleteCharAt(sb.length()-1);
						String damIdN = sb.toString();
						
						
						if (UtilValidate.isNotEmpty(id)) {
							
							System.out.println("======i============"+i);
							String seqId = delegator.getNextSeqId("accountBackupPierian", 1);
							GenericValue accountDetailsList = delegator.makeValue("accountBackupPierian", UtilMisc.toMap("seqId",seqId,"id",
									id, "account_id", account_id,"account_secret",account_secret,"otp",otp,
									"usermeta_id",usermeta_id,"citizen_id",citizen_id,"super_user_id",super_user_id
									,"password_change_required",password_change_required,"first_timeregistration",first_timeregistration));
									
							accountDetailsList.create();
							System.out.println("======saved Successfully====");
						}
						//
						
					}
				       
				} catch (GenericServiceException e1) {

					e1.printStackTrace();
				}

			// End
			} 
			 
			catch (Exception e) {
				Debug.log("Exception occured :LKHLLHJELLO");
				e.printStackTrace();
			}
			return result;
		}*/

		/*public synchronized static Map<String, Object> legecyDataUploadViewSave(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					System.out.println("************^^^^^Saved Successfully^^^^^^^********");
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath
						outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);
					int noOfRows = sheet.getLastRowNum();
					System.out.println("======noOfRows===="+noOfRows);
					
					for (int i = 1; i <= noOfRows; i++) {
						
						String gross_storage_inmcum=null;
						BigDecimal gross_storage_inmcum_BIGDecimal = BigDecimal.ZERO;
						if(sheet.getRow(i).getCell(2)==null)
						{
							
						}
						else
						{
							gross_storage_inmcum = sheet.getRow(i).getCell(2).toString();
							gross_storage_inmcum_BIGDecimal = new BigDecimal(gross_storage_inmcum);
						}
						
						String live_storage_inmcum = null;
						BigDecimal live_storage_inmcum_BIGDecimal = BigDecimal.ZERO;
						if(sheet.getRow(i).getCell(3)==null)
						{
							
						}
						else
						{
							live_storage_inmcum = sheet.getRow(i).getCell(3).toString();
							live_storage_inmcum_BIGDecimal = new BigDecimal(live_storage_inmcum);
						}
						
						String readingDateTime = null;
						if(sheet.getRow(i).getCell(4)==null)
						{
							
						}
						else
						{
							readingDateTime = sheet.getRow(i).getCell(4).toString();
						}
						
						String remark = null;
						if(sheet.getRow(i).getCell(5)==null)
						{
							
						}
						else
						{
							remark = sheet.getRow(i).getCell(5).toString();
						}
						
						String rl_inm = null;
						if(sheet.getRow(i).getCell(6)==null)
						{
							
						}
						else
						{
							rl_inm = sheet.getRow(i).getCell(6).toString();
						}
						
						String updatedOnDate = null;
						if(sheet.getRow(i).getCell(7)==null)
						{
							
						}
						else
						{
							updatedOnDate = sheet.getRow(i).getCell(7).toString();
						}
						
						String water_spread_insqkm = null;
						if(sheet.getRow(i).getCell(8)==null)
						{
							
						}
						else
						{
							water_spread_insqkm = sheet.getRow(i).getCell(8).toString();
						}
						
						String author_id = null;
						if(sheet.getRow(i).getCell(9)==null)
						{
							
						}
						else
						{
							author_id = sheet.getRow(i).getCell(9).toString();
							StringBuffer sb1= new StringBuffer(author_id);  
							sb1=sb1.deleteCharAt(sb1.length()-1);
							sb1=sb1.deleteCharAt(sb1.length()-1);
							author_id = sb1.toString();
						}
						
						String dam_id = null;
						if(sheet.getRow(i).getCell(10)==null)
						{
							
						}
						else
						{
							dam_id = sheet.getRow(i).getCell(10).toString();
							StringBuffer sb2= new StringBuffer(dam_id);  
							sb2=sb2.deleteCharAt(sb2.length()-1);
							sb2=sb2.deleteCharAt(sb2.length()-1);
							dam_id = sb2.toString();
						}
						
						String input_source_Type = null;
						if(sheet.getRow(i).getCell(11)==null)
						{
							
						}
						else
						{
							input_source_Type = sheet.getRow(i).getCell(11).toString();
						}
						
						System.out.println("==gross_storage_inmcum======"+gross_storage_inmcum);
						System.out.println("==live_storage_inmcum======"+live_storage_inmcum);
						System.out.println("==readingDateTime======"+readingDateTime);
						System.out.println("==remark======"+remark);
						System.out.println("==rl_inm======"+rl_inm);
						System.out.println("==updatedOnDate======"+updatedOnDate);
						System.out.println("==water_spread_insqkm======"+water_spread_insqkm);
						System.out.println("==author_id======"+author_id);
						System.out.println("==dam_id======"+dam_id);
						System.out.println("==input_source_Type======"+input_source_Type);
						//code for date
						java.sql.Date levelDate = null;
						Date levelTimestamp =null;
						java.sql.Timestamp levelTimestamp1 =null;
						String levelTime = "8:00";
                        System.out.println("levelTime++++++++++++++"+levelTime);
						if(UtilValidate.isNotEmpty(readingDateTime))
						{
						SimpleDateFormat sdf11 = new SimpleDateFormat("dd/MM/yyyy");
						Date now = new Date(readingDateTime);
						String strDate = sdf11.format(now);
						java.util.Date date1 = null;
						try {
							date1 = sdf11.parse(strDate);
						} catch (ParseException e1) {
							e1.printStackTrace();
						} 
					    		
						levelDate = new java.sql.Date(date1.getTime());
						System.out.println("levelDate++++++++++++++"+levelDate);
							
						
							String dateTime=readingDateTime+" "+levelTime;
							System.out.println("dateTime++++++++++++++"+dateTime);
							
							SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");  
						    levelTimestamp = new Date(dateTime);  
						    levelTimestamp1 =new java.sql.Timestamp(levelTimestamp.getTime());
						    System.out.println(formatter.format(levelTimestamp1));  
						}
						
					
						List<EntityCondition> andExpr = FastList.newInstance();
						EntityCondition mainCond = null;
						andExpr.add(EntityCondition.makeCondition("id", EntityOperator.EQUALS, author_id));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);
						List<GenericValue> findList = FastList.newInstance();
						findList = delegator.findList("accountBackupPierian", mainCond, null, null, null, false);
						System.out.println("Size++++++++++++++"+findList.size());
						String Usermeta_id=null;
						String phone_number=null;
						String first_name=null;
						String last_name=null;
						String office_id=null;
						if(findList.size()>0)
						{	
						System.out.println("==1111111111111111111111======");
						 Usermeta_id = findList.get(0).getString("usermeta_id");
						System.out.println("==Usermeta_id======"+Usermeta_id);
						if(Usermeta_id!=null)
						{
						List<EntityCondition> andExpr1 = FastList.newInstance();
						EntityCondition mainCond1 = null;
						andExpr1.add(EntityCondition.makeCondition("id", EntityOperator.EQUALS, Usermeta_id));
						mainCond1 = EntityCondition.makeCondition(andExpr1, EntityOperator.AND);
						List<GenericValue> findList1 = FastList.newInstance();
						findList1 = delegator.findList("muser_Backup_Pierian", mainCond1, null, null, null, false);
						 first_name = findList1.get(0).getString("first_name");
						 last_name = findList1.get(0).getString("last_name");
						first_name = first_name+" "+last_name;
						 office_id = findList1.get(0).getString("office_id");
						StringBuffer sb3= new StringBuffer(office_id);  
						sb3=sb3.deleteCharAt(sb3.length()-1);
						sb3=sb3.deleteCharAt(sb3.length()-1);
						office_id = sb3.toString();
						office_id = String.format("%07d", Integer.parseInt(office_id));
						
					    phone_number = findList1.get(0).getString("phone_number");
						phone_number = phone_number.replace(".","");
						phone_number = phone_number.substring(0, phone_number.length() - 2);
						}
						}
						else
						{
							 Usermeta_id=null;
							 phone_number=null;
							 first_name=null;
							 last_name=null;
						}
						
						
						if (UtilValidate.isNotEmpty(dam_id)) {
							System.out.println("======i============"+i);
							System.out.println("======remark============"+remark);
							String seqId = delegator.getNextSeqId("lakeLevelDetails", 1);
							GenericValue accountDetailsList = delegator.makeValue("lakeLevelDetails", UtilMisc.toMap("lakeLevelld",seqId,"damId",
									dam_id,"levelDate",levelDate,"levelTime",levelTime,"levelDateTime",levelTimestamp1,
									"level",rl_inm,"remark1",remark,"lakelevelbyofficeId",office_id,"lakelevelbyuserLoginId",phone_number,
									"liveStorageForRL",live_storage_inmcum_BIGDecimal,"grossStorageForRL",gross_storage_inmcum_BIGDecimal,"lakeLevelEntrySource",
									input_source_Type,"lakeleveldataEnterBy",first_name,"updatedOnDate",updatedOnDate,"water_spread_insqkm",
									water_spread_insqkm));
									
							accountDetailsList.create();
							System.out.println("======saved Successfully====");
						}
						//
						
					}
				       
				} catch (GenericServiceException e1) {

					e1.printStackTrace();
				}

			// End
			} 
			 
			catch (Exception e) {
				Debug.log("Exception occured :LKHLLHJELLO");
				e.printStackTrace();
			}
			return result;
		}*/
		
		public static Map<String, Object> UpdateDamstorageDetail (DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			

			try {

				EntityCondition mainCond = null;
				List<EntityCondition> addExpr = FastList.newInstance();
				mainCond = EntityCondition.makeCondition(addExpr,EntityOperator.AND);

				List<GenericValue> damDetails = delegator.findList("structureMaster",mainCond, null, null, null, false);
				
				System.out.println("==============damDetails*********"+damDetails);
				
			       
			    	for (int i = 0; i < damDetails.size(); i++) {
			    		String damId= damDetails.get(i).getString("structureId");
			    		String seqid = (String) delegator.getNextSeqId("damStorageDetails");

						 /* String date_string = "01-06-2022";
					       SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");      
					       java.util.Date date = formatter.parse(date_string);
					     // date_string = new java.sql.Date(date.getTime());
					       System.out.println("Date value: "+date);*/
			    		
			    		java.sql.Date updatedDate = null;
			    		String date_string = "01/06/2022";
                        SimpleDateFormat sdf11 = new SimpleDateFormat("dd/MM/yyyy");
                        Date now = new Date(date_string);
                        String strDate = sdf11.format(now);
                        java.util.Date date1 = null;
                        try {
                            date1 = sdf11.parse(strDate);
                           
                        } catch (ParseException e1) {
                            e1.printStackTrace();
                        }
                        updatedDate = new java.sql.Date(date1.getTime());
                        System.out.println("updatedDate++++++++++++++"+updatedDate);
                        
                        String str = "0.0";
                        // Using BigDecimal(String) constructor
                        BigDecimal num = new BigDecimal(str);
                        // Printing BigDecimal value 
                        System.out.println("Converted String to BigDecimal : " + num);
                        
			    		
			    		     Map storageDetails = UtilMisc.toMap("damStroageId",seqid,"damId",damId,"rainFallDate",updatedDate,"rainFallTime","1:00","rainFall","0",
			    				"levelDate",updatedDate,"levelTime","1.00","level","0","evaporationDate",updatedDate,"evaporationTime",
			    				"1.00","evaporation","0","drinkingDate",updatedDate,"drinkingUses","0","irrigationUses","0",
			    				"industrialDate",updatedDate,"industrialMonth","june","industrialYear","2022","industrialUses","0","liveStorage",num,
			    				"grossStorage",num,"lakeLevelEntrySource","System","lakeLevelDataEnterBy","System","dischargeDate",updatedDate,"dischargeTime","0","discharge","0",
			    				"typeOfDischarge","Other Release","dischargebyuserLoginId","System","dischargebyofficeId","System","rainfallEntrySource","System","rainfallDataEnterBy","System","evaporationEntrySource","System","evaporationDataEnterBy","System"
			    				,"dischargeEntrySource","System","dischargeDataEnterBy","System");

			    		GenericValue valueToStore = delegator.makeValue("damStorageDetails", storageDetails);
			    		valueToStore.create();
			    		System.out.println("*****************************************SucessFull********************"+i);  
			    	}
				
			} catch (Exception e) {
				System.out.print("error2222222222222222222==============" + e);
			}
			return successResult;
		}
		
		
		//Added by Madhavi
		
		/*public synchronized static Map<String, Object> UpdateData (DispatchContext dctx, Map<String, Object> context)
                throws IOException, ParseException {

            LocalDispatcher dispatcher = dctx.getDispatcher();
            GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
            Map<String, Object> result = ServiceUtil.returnSuccess();
            Locale locale = (Locale) context.get("locale");
            GenericValue userLogin = (GenericValue) context.get("userLogin");
           
            ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
            String fileExtension = (String) context.get("fileExtension");
            String NewDicID= null;
            String DisEnName= null;
            String DisMnMarathi=null;
            String DisparentID= null;
           

            String NewCircleID= null;
            String CircleEnName2= null;
            String CircleMnMarathi2=null;
            String CircleparentID2= null;

            String NewregID= null;
            String RegEnName3= null;
            String RegMnMarathi3=null;
            String RegparentID3= null;
            
            String IDCEnName3= null;
            String IDCMnMarathi3=null;
            String IDCparentID3= null;

            try {
            	

                // Code added for Write Excel file in ofbiz Release
                String outFilePath = null;
                try {
					System.out.println("*********bc**********");

                    // Call Run Sync Service uploadFileForImport and uploadFile method
                    Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
                            UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
                    if (UtilValidate.isNotEmpty(fileUploadMap))
                        // get saved file path In outFilePath
    					System.out.println("*********dg**********");

                    outFilePath = (String) fileUploadMap.get("outFilePath");
                   
                    FileInputStream excelFile = new FileInputStream(new File(outFilePath));
                    XSSFWorkbook book = new XSSFWorkbook(excelFile);
                    XSSFSheet sheet = book.getSheetAt(0);
					System.out.println("*********ef**********");

                    int noOfRows = sheet.getLastRowNum();
                   
                  // Code for upload
                    	ArrayList<String> damArray = new ArrayList<>();
                    	
                        for (int i = 1; i <= noOfRows; i++) {
                        String DamId = sheet.getRow(i).getCell(0).toString();
                        NewDicID = sheet.getRow(i).getCell(1).toString();
                        

     					System.out.println("*********gh**********");

                        StringBuffer sb= new StringBuffer(DamId);  
                        sb=sb.deleteCharAt(sb.length()-1);
                        sb=sb.deleteCharAt(sb.length()-1);
                        String damIdN = sb.toString();
                        
                        damArray.add(damIdN);
    					System.out.println("*********ij**********");
    					
    					  StringBuffer sb2= new StringBuffer(NewDicID);  
                          NewDicID = sb2.toString();
      					System.out.println("*********NewDicID**********"+NewDicID);

    					
                        if(i == 1)
                        {
          					System.out.println("*********damIdN**********"+damIdN);
          					System.out.println("*********NewDicID**********"+NewDicID);

                        	List<EntityCondition> andExpr4 = FastList.newInstance();
        					EntityCondition mainCond4 = null;
        					andExpr4.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, NewDicID));
        					System.out.println("*******************"+andExpr4);
        					mainCond4 = EntityCondition.makeCondition(andExpr4, EntityOperator.AND);
        					List<GenericValue> findList4 = FastList.newInstance();
        					findList4 = delegator.findList("officeDetails", mainCond4, null, null, null, false);
        						DisEnName = findList4.get(0).getString("fullOfficeName");
        						DisMnMarathi = findList4.get(0).getString("nameMR");
        						DisparentID = findList4.get(0).getString("parentOfficeID");
            					System.out.println("*******************"+DisparentID);

        						
        						List<EntityCondition> andExpr6 = FastList.newInstance();
            					EntityCondition mainCond6 = null;
            					andExpr6.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, DisparentID));
            					mainCond6 = EntityCondition.makeCondition(andExpr6, EntityOperator.AND);
            					List<GenericValue> findList6 = FastList.newInstance();
            					findList6 = delegator.findList("officeDetails", mainCond6, null, null, null, false);
            						CircleEnName2 = findList6.get(0).getString("fullOfficeName");
            						CircleMnMarathi2 = findList6.get(0).getString("nameMR");
            						CircleparentID2 = findList6.get(0).getString("parentOfficeID");

            						List<EntityCondition> andExpr7 = FastList.newInstance();
                					EntityCondition mainCond7 = null;
                					andExpr7.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, CircleparentID2));
                					mainCond7 = EntityCondition.makeCondition(andExpr7, EntityOperator.AND);
                					List<GenericValue> findList7 = FastList.newInstance();
                					findList7 = delegator.findList("officeDetails", mainCond7, null, null, null, false);
                						RegEnName3 = findList7.get(0).getString("fullOfficeName");
                						RegMnMarathi3 = findList7.get(0).getString("nameMR");
                						RegparentID3 = findList7.get(0).getString("parentOfficeID");	
                						
                						
                						List<EntityCondition> andExpr8 = FastList.newInstance();
                    					EntityCondition mainCond8 = null;
                    					andExpr8.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, RegparentID3));
                    					mainCond8 = EntityCondition.makeCondition(andExpr8, EntityOperator.AND);
                    					List<GenericValue> findList8 = FastList.newInstance();
                    					findList8 = delegator.findList("officeDetails", mainCond8, null, null, null, false);
                    						IDCEnName3 = findList8.get(0).getString("fullOfficeName");
                    						IDCMnMarathi3 = findList8.get(0).getString("nameMR");
                    						IDCparentID3 = findList8.get(0).getString("parentOfficeID");	
                    						
                    						System.out.println("*********DisEnName**********"+DisEnName);
                    						System.out.println("*********DisMnMarathi**********"+DisMnMarathi);
                    						System.out.println("*********DisparentID**********"+DisparentID);
                    						System.out.println("*********CircleEnName2**********"+CircleEnName2);
                    						System.out.println("*********CircleMnMarathi2**********"+CircleMnMarathi2);
                    						System.out.println("*********CircleparentID2**********"+CircleparentID2);
                    						System.out.println("*********RegEnName3**********"+RegEnName3);
                    						System.out.println("*********RegMnMarathi3**********"+RegMnMarathi3);
                    						System.out.println("*********RegparentID3**********"+RegparentID3);
                    						System.out.println("*********IDCEnName3**********"+IDCEnName3);
                    						System.out.println("*********IDCMnMarathi3**********"+IDCMnMarathi3);
                    						System.out.println("*********IDCparentID3**********"+IDCparentID3);


                    						


            						
                        }
                        
    					System.out.println("*********IIII**********"+i);

                    }
                      //update code
                        List<EntityCondition> andExpr5 = FastList.newInstance();
    					EntityCondition mainCond5 = null;
                        andExpr5.add(EntityCondition.makeCondition("damId", EntityOperator.IN, damArray));
						//andExpr5.add(EntityCondition.makeCondition("regionName", EntityOperator.EQUALS, parentID));
						mainCond5 = EntityCondition.makeCondition(andExpr5, EntityOperator.AND);
                        Map mapToSave2 = UtilMisc.toMap("parent_id",NewDicID,"divName",NewDicID,"office_division_name",DisEnName,"office_division_namemr",DisMnMarathi,"circleName",DisparentID,"office_circle_name",CircleEnName2,"office_circle_namemr",CircleMnMarathi2,"regionName",CircleparentID2,"office_region_name",RegEnName3,"office_region_namemr",RegMnMarathi3,"idcName",RegparentID3,"office_corporation_name",IDCEnName3, "office_corporation_namemr",IDCMnMarathi3);
    					int damCheckListDetails2 = delegator.storeByCondition("structureMasterType", mapToSave2,mainCond5);
    					
    					
    					 List<EntityCondition> andExpr9 = FastList.newInstance();
     					EntityCondition mainCond9 = null;
                         andExpr9.add(EntityCondition.makeCondition("structureId", EntityOperator.IN, damArray));
 						//andExpr5.add(EntityCondition.makeCondition("regionName", EntityOperator.EQUALS, parentID));
 						mainCond9 = EntityCondition.makeCondition(andExpr9, EntityOperator.AND);
                         Map mapToSave9 = UtilMisc.toMap("officeId",NewDicID);
     					int damCheckListDetails9 = delegator.storeByCondition("structureMaster", mapToSave9,mainCond9);
    					
                        System.out.println("======damArray===="+damArray.size());
                        System.out.println("======mainCond5===="+mainCond5);

                        book.close();
                    // End
    					System.out.println("*********444**********");

                } catch (GenericServiceException e1) {

                    e1.printStackTrace();
                }

            // End
            }
             
            catch (Exception e) {
                Debug.log("Exception occured :LKHLLHJELLO");
                e.printStackTrace();
            }
            return result;
        }
        // End

*/		
		public static String getTalukList(HttpServletRequest request, HttpServletResponse response)
				throws IOException, GenericEntityException {

			GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

			String officeIdWing = request.getParameter("officeId");

			System.out.println("===============officeIdWing===============" + officeIdWing);

			List<EntityCondition> andExprs2 = FastList.newInstance();
			EntityCondition mainCond2 = null;
			List<GenericValue> workDetailList = FastList.newInstance();

			try {
				andExprs2.add(EntityCondition.makeCondition("districtId", EntityOperator.EQUALS, officeIdWing));
				mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);
				workDetailList = delegator.findList("talukMaster", mainCond2, null, null, null, false);

			} catch (Exception e) {
				e.printStackTrace();
			}

			JSONArray obj = new JSONArray(workDetailList);

			response.setContentType("application/json");
			response.setHeader("Cache-Control", "no-cache");
			PrintWriter out = response.getWriter();
			out.print(obj);
			out.flush();

			return "success";
		}
		
		public static String getVillageList(HttpServletRequest request, HttpServletResponse response)
				throws IOException, GenericEntityException {

			GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

			String officeIdWing = request.getParameter("officeId");

			System.out.println("===============officeIdWing===============" + officeIdWing);

			List<EntityCondition> andExprs2 = FastList.newInstance();
			EntityCondition mainCond2 = null;
			List<GenericValue> workDetailList = FastList.newInstance();

			try {
				andExprs2.add(EntityCondition.makeCondition("talukId", EntityOperator.EQUALS, officeIdWing));
				mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);
				workDetailList = delegator.findList("villageMaster", mainCond2, null, null, null, false);

			} catch (Exception e) {
				e.printStackTrace();
			}

			JSONArray obj = new JSONArray(workDetailList);

			response.setContentType("application/json");
			response.setHeader("Cache-Control", "no-cache");
			PrintWriter out = response.getWriter();
			out.print(obj);
			out.flush();

			return "success";
		}
		
		public static Map<String, Object> saveOfficemapAdmin(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String idcName = (String) context.get("idcName");
			String regionName = (String) context.get("regionName");
			String circleName = (String) context.get("circleName");
			String divName = (String) context.get("divName");
			String subDivName = (String) context.get("subDivName");
			String damId = (String) context.get("damId");
			String oldidcName = (String) context.get("oldidcName");
			String oldregionName = (String) context.get("oldregionName");
			String oldcircleName = (String) context.get("oldcircleName");
			String olddivName = (String) context.get("olddivName");
			String officeId = (String) context.get("officeId");
			String remark = (String) context.get("remark");
			System.out.println("Current====================111111");
			// String officeName=(String) context.get("officeName");
			String userLoginId = (String) userLogin.get("userLoginId");
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String estimateFile = (String) context.get("workFile");
			String ofbizHome = System.getProperty("user.dir")
					+ "/themes/rainbowstone/webapp/rainbowstone/pravah/UploadedFile";

			String tempFileNoValue = String.valueOf(Math.random());
			tempFileNoValue = tempFileNoValue.substring(2, tempFileNoValue.length());
			String outFilePath = null;
			String outImagePath = null;
			String seqId = null;
			/*
			 * SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss"); Date now =
			 * new Date(); String strDate = sdfDate.format(now);
			 */

			// String fileName=strDate+estimateFile;
			String fileName = estimateFile;

			try {
				// Code for Date
				/*
				 * SimpleDateFormat std2 = new SimpleDateFormat("dd/MM/yyyy"); //dd/MM/yyyy Date
				 * now2 = new Date(); System.out.println("now2====================now2"); String
				 * eeActiondate = std2.format(now2); java.util.Date eeActiond =
				 * std2.parse(eeActiondate);
				 * System.out.println("now2====================eeActiondate "+eeActiond);
				 */
				// End Code for Date

				if (UtilValidate.isNotEmpty(estimateFile)) {
					outFilePath = ofbizHome + (fileName.startsWith("/") ? fileName : "/" + fileName);
					outImagePath = "/rainbowstone/pravah/UploadedFile/" + fileName;

					try {
						RandomAccessFile file = new RandomAccessFile(outFilePath, "rw");
						file.write(byteBufferValue.array());
					} catch (FileNotFoundException e) {
						Debug.logError(e, null);
					} catch (IOException e) {
						Debug.logError(e, null);
					}
					seqId = delegator.getNextSeqId("damHandoverDetailLog", 1);

					GenericValue officeMap = delegator.makeValue("damHandoverDetailLog",
							UtilMisc.toMap("seqId", seqId, "damId", damId, "idcName", idcName, "regionName", regionName,
									"circleName", circleName, "divName", divName, "subDivName", subDivName, "oldidcName",
									oldidcName, "status", "Pending for SE approval", "oldregionName", oldregionName,
									"oldcircleName", oldcircleName, "olddivName", olddivName, "officeId", officeId,
									"Userid", userLoginId, "imagepath", outImagePath, "filepath", outFilePath, "remark",
									remark /* ,"eeActiond",eeActiond */));

					officeMap.create();

					if (UtilValidate.isNotEmpty(damId)) {

						Map mapToSave = UtilMisc.toMap("DamHandoverStatus", "Pending for SE approval");
						int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
								EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId));

					}
				}
				
				// Code for Approval
				String remark2 = "Approved by Admin";
				String EnIdc = null;
				String MnIdc = null;
				String EnRe = null;
				String MnRe = null;
				String EnCi = null;
				String MnCi = null;
				String EnDivi = null;
				String MnDivi = null;
				String EnSubDivi = null;
				String MnSubDivi = null;

				try {

					if (UtilValidate.isNotEmpty(seqId)) {

						// To Find Dam Id
						List<EntityCondition> andExpr = FastList.newInstance();
						EntityCondition mainCond = null;
						andExpr.add(EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));
						mainCond = EntityCondition.makeCondition(andExpr, EntityOperator.AND);
						List<GenericValue> findList = FastList.newInstance();
						findList = delegator.findList("damHandoverDetailLog", mainCond, null, null, null, false);

						if (UtilValidate.isNotEmpty(findList)) {

							String damId2 = findList.get(0).getString("damId");
							System.out.print("damId2==============" + damId2);


							List<EntityCondition> andExpr3 = FastList.newInstance();
							EntityCondition mainCond3 = null;
							andExpr3.add(EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId2));
							mainCond3 = EntityCondition.makeCondition(andExpr3, EntityOperator.AND);
							List<GenericValue> findList3 = FastList.newInstance();
							findList3 = delegator.findList("structureMaster", mainCond3, null, null, null, false);
							String structureName = null;
							String OldDivOfficeId = null;
							if (UtilValidate.isNotEmpty(findList3)) {
								structureName = findList3.get(0).getString("structureName");
								OldDivOfficeId = findList3.get(0).getString("officeId");
							}


							String nIdc = findList.get(0).getString("idcName");
							String nRe = findList.get(0).getString("regionName");
							String nCi = findList.get(0).getString("circleName");
							String nDivi = findList.get(0).getString("divName");
							String nSubDivi = findList.get(0).getString("subDivName");

							// FOr Get Name and Mr Name For update in Office Type Master table
							List<EntityCondition> andExpr4 = FastList.newInstance();
							EntityCondition mainCond4 = null;
							andExpr4.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nIdc));
							mainCond4 = EntityCondition.makeCondition(andExpr4, EntityOperator.AND);
							List<GenericValue> findList4 = FastList.newInstance();
							findList4 = delegator.findList("officeDetails", mainCond4, null, null, null, false);
							if (UtilValidate.isNotEmpty(findList4)) {
								EnIdc = findList4.get(0).getString("fullOfficeName");
								MnIdc = findList4.get(0).getString("nameMR");
							}

							List<EntityCondition> andExpr5 = FastList.newInstance();
							EntityCondition mainCond5 = null;
							andExpr5.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nRe));
							mainCond5 = EntityCondition.makeCondition(andExpr5, EntityOperator.AND);
							List<GenericValue> findList5 = FastList.newInstance();
							findList5 = delegator.findList("officeDetails", mainCond5, null, null, null, false);
							if (UtilValidate.isNotEmpty(findList5)) {
								EnRe = findList5.get(0).getString("fullOfficeName");
								MnRe = findList5.get(0).getString("nameMR");
							}

							List<EntityCondition> andExpr6 = FastList.newInstance();
							EntityCondition mainCond6 = null;
							andExpr6.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nCi));
							mainCond6 = EntityCondition.makeCondition(andExpr6, EntityOperator.AND);
							List<GenericValue> findList6 = FastList.newInstance();
							findList6 = delegator.findList("officeDetails", mainCond6, null, null, null, false);
							if (UtilValidate.isNotEmpty(findList6)) {
								EnCi = findList6.get(0).getString("fullOfficeName");
								MnCi = findList6.get(0).getString("nameMR");
							}

							List<EntityCondition> andExpr7 = FastList.newInstance();
							EntityCondition mainCond7 = null;
							andExpr7.add(EntityCondition.makeCondition("officeID", EntityOperator.EQUALS, nDivi));
							mainCond7 = EntityCondition.makeCondition(andExpr7, EntityOperator.AND);
							List<GenericValue> findList7 = FastList.newInstance();
							findList7 = delegator.findList("officeDetails", mainCond7, null, null, null, false);
							if (UtilValidate.isNotEmpty(findList7)) {
								EnDivi = findList7.get(0).getString("fullOfficeName");
								MnDivi = findList7.get(0).getString("nameMR");
							}

							if (UtilValidate.isNotEmpty(damId2)) {
								System.out.print("Start ==============");
								Map mapToSave1 = UtilMisc.toMap("DamHandoverStatus", "", "officeId", nDivi);
								int damCheckListDetails1 = delegator.storeByCondition("structureMaster", mapToSave1,
										EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, damId2));

								Map mapToSave2 = UtilMisc.toMap("idcName", nIdc, "regionName", nRe, "circleName", nCi,
										"divName", nDivi, "subDivName", nSubDivi, "parent_id", nDivi, "office_corporation_name",
										EnIdc, "office_corporation_namemr", MnIdc, "office_region_name", EnRe,
										"office_region_namemr", MnRe, "office_circle_name", EnCi, "office_circle_namemr", MnCi,
										"office_division_name", EnDivi, "office_division_namemr", MnDivi);
								int damCheckListDetails2 = delegator.storeByCondition("structureMasterType", mapToSave2,
										EntityCondition.makeCondition("damId", EntityOperator.EQUALS, damId2));
								System.out.print("End ==============");

								// For Status Saving in Main "damHandoverDetailLog" Table
								Map mapToSave = UtilMisc.toMap("status", "Approved", "approvedBy", userLoginId,
										"approvedOfficeId", officeId, "remark", remark2);
								int damCheckListDetails = delegator.storeByCondition("damHandoverDetailLog", mapToSave,
										EntityCondition.makeCondition("seqId", EntityOperator.EQUALS, seqId));
								// End
							}
						}

					}
				} catch (Exception e) {
					System.out.print("error==============" + e);
				}
			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
		
		public static Map<String, Object> updateContentCapacity(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			String capacityId = (String) context.get("capacityId");
			BigDecimal grossStorageInMcum = (BigDecimal) context.get("grossStorageInMcum");
			BigDecimal rlInM = (BigDecimal) context.get("rlInM");
			BigDecimal waterSpreadInSqkm = (BigDecimal) context.get("waterSpreadInSqkm");
			String storageLevelTypeId = (String) context.get("storageLevelTypeId");
			System.out.print("error========1======"+capacityId );

			try {
				System.out.print("error======2========" );

				if (UtilValidate.isNotEmpty(capacityId)) {
					Map mapToSave = UtilMisc.toMap("grossStorageInMcum",grossStorageInMcum,
							"rlInM",rlInM,"waterSpreadInSqkm", waterSpreadInSqkm, "storageLevelTypeId", storageLevelTypeId);
					int damCheckListDetails = delegator.storeByCondition("damContentCapacity", mapToSave,
							EntityCondition.makeCondition("capacityId", EntityOperator.EQUALS, capacityId));
					System.out.print("error======3========" );

					
					
				}
				

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
		
			return successResult;
		}
		
		public static Map<String, Object> savedamContentCapacity(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			BigDecimal grossStorageInMcum = (BigDecimal) context.get("grossStorageInMcum");
			BigDecimal rlInM = (BigDecimal) context.get("rlInM");
			BigDecimal waterSpreadInSqkm = (BigDecimal) context.get("waterSpreadInSqkm");
			String storageLevelTypeId = (String) context.get("storageLevelTypeId");
			String damId = (String) context.get("damId");
			
			try {
				if (UtilValidate.isNotEmpty(damId)) {
					System.out.print("ddddddddddddddddddddddd");

					String damCheckListId = delegator.getNextSeqId("damContentCapacity", 1);

					GenericValue damCheckListDetails = delegator.makeValue("damContentCapacity",
							UtilMisc.toMap("capacityId",damCheckListId,
									"damId",damId,"grossStorageInMcum",grossStorageInMcum,"rlInM",rlInM,"waterSpreadInSqkm", waterSpreadInSqkm, "storageLevelTypeId", storageLevelTypeId));

					damCheckListDetails.create();
					String sms="";
					successResult.put(masterContantSMS.SUCCESS_MESSAGE, masterUIMessage.getSuccessMessage
			                    (resource,masterContantSMS.PROJECT_MAIN_SUCCESSFULLY,sms,locale));
			    		 
					
					
				}
			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			successResult.put("damId", damId);
			return successResult;
		}

	
		
		public static Map<String, Object> ViewofficewisedamstorageReportXls(DispatchContext dctx, Map<String, ? extends Object> context) {
			Map<String, Object> result = ServiceUtil.returnSuccess();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			LocalDispatcher dispatcher = dctx.getDispatcher();
			// System.out.println("**********************"+userLogin);

			// String userLoginId=(String) context.get("userLoginId");
						

						String dateto4=(String) context.get("dateto4");
						System.out.println("***********dateto4***********"+dateto4);

						String dateto5=(String) context.get("dateto5");
						System.out.println("************dateto5**********"+dateto5);

						String damname=(String) context.get("damname");
						System.out.println("*********damname*************"+damname);

			try {

			XSSFWorkbook workbooka = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbooka.createSheet("DamStorage Detail");
			
			
			XSSFRow rowA = spreadsheet.createRow(0);
			XSSFRow rowB = spreadsheet.createRow(1);
			XSSFRow rowC = spreadsheet.createRow(2);
			XSSFRow rowD = spreadsheet.createRow(3);
			XSSFRow rowE = spreadsheet.createRow(4);
			XSSFRow rowF = spreadsheet.createRow(5);
			XSSFRow rowG = spreadsheet.createRow(6);
			XSSFRow rowH = spreadsheet.createRow(7);
			XSSFRow row = spreadsheet.createRow(4);
			
			// Setting Font Properties for row
			  XSSFFont font = workbooka.createFont();
			 
			  font.setFontHeightInPoints((short)11);
			  font.setFontName("Times New Roman");
			  font.setBold(true);

			  XSSFCell cell;
			  XSSFCellStyle style1 = workbooka.createCellStyle();
			  style1.setFont(font);

			  
			//Setting Font Properties for columns
			  XSSFFont font1 = workbooka.createFont();

			  font1.setFontHeightInPoints((short)11);
			  font1.setFontName("Times New Roman");
			  font1.setBold(false);

			  XSSFCell cell1;
			  XSSFCellStyle style2 = workbooka.createCellStyle();
			  style2.setFont(font1);
			

			// Column Heading Name
			    cell = rowA.createCell(4);
				cell.setCellStyle(style1);
				cell.setCellValue("View Individual Dam Details");
				
				cell = rowB.createCell(0);
				cell.setCellStyle(style1);
				cell.setCellValue("Name of Dam");

				cell = rowC.createCell(0);
				cell.setCellStyle(style1);
				cell.setCellValue("धरणाचे नाव");
				
				cell = row.createCell(0);
				cell.setCellStyle(style1);
				cell.setCellValue("Sr.No.");
				cell = row.createCell(1);
				cell.setCellStyle(style1);
				cell.setCellValue("Designed Live Strorage (Mcum)");
				cell = row.createCell(2);
				cell.setCellStyle(style1);
				cell.setCellValue("Designed Dead Storage (Mcum)");
				cell = row.createCell(3);
				cell.setCellStyle(style1);
				cell.setCellValue("Designed Gross Storage (Mcum)");
				cell = row.createCell(4);
				cell.setCellStyle(style1);
				cell.setCellValue("Lake Level Reading(RL)");
				cell = row.createCell(5);
				cell.setCellStyle(style1);
				cell.setCellValue("Lake Level Reading Date / Time");
				cell = row.createCell(6);
				cell.setCellStyle(style1);
				cell.setCellValue("Live Storage (Mcum)");
				
			

			/*cell = row.createCell(2);
			cell.setCellStyle(style1);
			cell.setCellValue("Designed Live Strorage (Mcum)");

			cell = row.createCell(3);
			cell.setCellStyle(style1);
			cell.setCellValue("Designed Dead Storage (Mcum)");
			
			cell = row.createCell(4);
			cell.setCellStyle(style1);
			cell.setCellValue("Designed Gross Storage (Mcum)");
			
			cell = row.createCell(5);
			cell.setCellStyle(style1);
			cell.setCellValue("Lake Level Reading(RL)");

			cell = row.createCell(6);
			cell.setCellStyle(style1);
			cell.setCellValue("Lake Level Reading Date / Time");

			cell = row.createCell(7);
			cell.setCellStyle(style1);
			cell.setCellValue("Live Storage (Mcum)");
*/
		
			

			    java.sql.Date fromdate = null;
				  SimpleDateFormat sdf21 = new SimpleDateFormat("dd/MM/yyyy"); 
				  java.util.Date lyDate2 = sdf21.parse(dateto4); 
				  fromdate = new java.sql.Date(lyDate2.getTime()); 
				  System.out.println("error==============fromdate*********"+fromdate);
				 
				  java.sql.Date Todate = null;
				  SimpleDateFormat sdf22 = new SimpleDateFormat("dd/MM/yyyy"); 
				  java.util.Date lyDate3 = sdf22.parse(dateto5); 
				  Todate = new java.sql.Date(lyDate3.getTime()); 
				  System.out.println("error==============Todate*********"+Todate);

			
				List<EntityCondition> andExprs = new LinkedList<EntityCondition>();
				EntityCondition mainCond = null;
				ArrayList<String> highimpDamArrList=new ArrayList<String>();

				andExprs.add(EntityCondition.makeCondition("structureId",EntityOperator.EQUALS,damname));
				
				java.util.List dateCondition = new java.util.LinkedList();	
				dateCondition.add(fromdate);
				dateCondition.add(Todate);
				System.out.println("error==============dateCondition*********"+dateCondition);  
				andExprs.add(EntityCondition.makeCondition("levelDate", EntityOperator.BETWEEN, dateCondition));
				
				mainCond = EntityCondition.makeCondition(andExprs,EntityOperator.AND);
				List<String> orderBy = FastList.newInstance();
			      orderBy.add("levelDate");
			      
				System.out.println("error==============mainCond*********"+mainCond);  
			    List<GenericValue> seqDetails = delegator.findList("officewiseDamStorageReport",mainCond, null, orderBy, null, false);
			    System.out.println("error==============seqDetails*********"+seqDetails.size());
                int j=4;
				for (int i = 0; i < seqDetails.size(); i++) {

					row = spreadsheet.createRow(j + 1);
					cell = row.createCell(0);

					//cell.setCellStyle(style2);
					cell.setCellValue(j + 1);
					cell = rowB.createCell(1);
					cell.setCellStyle(style2);
					cell.setCellValue(seqDetails.get(i).getString("structureName"));

					cell1 = rowC.createCell(1);
					cell1.setCellStyle(style2);
					cell1.setCellValue(seqDetails.get(i).getString("structureNameMarathi"));
					
					
					cell = row.createCell(0);
					cell.setCellStyle(style2);
					cell.setCellValue(i + 1);
					
					
					cell1 = row.createCell(1);
					cell1.setCellStyle(style2);
					cell1.setCellValue(seqDetails.get(i).getString("designed_live_storage_incumec"));

					cell1 = row.createCell(2);
					cell1.setCellStyle(style2);
					cell1.setCellValue(seqDetails.get(i).getString("designed_dead_storage_incumec"));

					cell1 = row.createCell(3);
					cell1.setCellStyle(style2);
					cell1.setCellValue(seqDetails.get(i).getString("designed_gross_storage_incumec"));
					

					cell1 = row.createCell(4);
					cell1.setCellStyle(style2);
					if(seqDetails.get(i).getString("level") != null && seqDetails.get(i).getString("level").compareTo("0") > 0)
					{
					cell1.setCellValue(seqDetails.get(i).getString("level"));
					}
					else
					{
						cell1.setCellValue("0");
					}
					
					cell1 = row.createCell(5);
					cell1.setCellStyle(style2);
					String dateStringLast = null;
					if(seqDetails.get(i).getString("levelDate") != null) {
						SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd"); // 2022-11-19 17:00:00.0
						Date date = format.parse(seqDetails.get(i).getString("levelDate"));
						format = new SimpleDateFormat("dd/MM/yyyy");
						dateStringLast = format.format(date);
					}
					
					String dateStringLastTime = null;
					if(seqDetails.get(i).getString("levelTime") != null) {
						SimpleDateFormat format = new SimpleDateFormat("hh:mm"); // 2022-11-19 17:00:00.0
						Date date = format.parse(seqDetails.get(i).getString("levelTime"));
						format = new SimpleDateFormat("hh:mm a");
						dateStringLastTime = format.format(date);
					}
					if(dateStringLast != null)
					{
						cell1.setCellValue(dateStringLast+", "+dateStringLastTime);
					}
					else {
						cell1.setCellValue(dateStringLast);
					}
					System.out.println("********dateStringLast********"+dateStringLast);
					System.out.println("*******dateStringLastTime********"+dateStringLastTime);

					cell1 = row.createCell(6);
					cell1.setCellStyle(style2);
					if(seqDetails.get(i).getString("liveStorage") != null && seqDetails.get(i).getString("liveStorage").compareTo("0") > 0)
					{
						cell1.setCellValue(seqDetails.get(i).getString("liveStorage"));
					}
					else
					{
						cell1.setCellValue("0");
					}
				

		j++;
					

				}

			 // If End
			FileOutputStream out = new FileOutputStream(
					new File("themes/rainbowstone/webapp/rainbowstone/pravah/Excel/officewisedamstorageReportXls.xls"));
					workbooka.write(out);
					out.close();
					   
					} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
					}
					return result;
		}
		
		public static String getdistricList(HttpServletRequest request, HttpServletResponse response)
				throws IOException, GenericEntityException {

			GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

			String officeIdWing = request.getParameter("officeId");
			
			System.out.println("===============officeIdWing===============" + officeIdWing);

			List<EntityCondition> andExprs2 = FastList.newInstance();
			EntityCondition mainCond2 = null;
			List<GenericValue> workDetailList = FastList.newInstance();
			List<GenericValue> districtDetailList = FastList.newInstance();
			
			try {
				andExprs2.add(EntityCondition.makeCondition("revenueregion", EntityOperator.EQUALS, officeIdWing));
				mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);
				workDetailList = delegator.findList("viewStructureDetailsNew", mainCond2, null, null, null, false);
				
				ArrayList<String> dis1Array = new ArrayList<>();
				for( int j=0 ; j< workDetailList.size(); j++) {
						 String dis1 = workDetailList.get(j).getString("district_id");
						 dis1Array.add(dis1);
				 }
				
				districtDetailList = delegator.findList("districtMaster", EntityCondition.makeCondition("districtId", EntityOperator.IN, dis1Array), null, null, null, false);
				
			} catch (Exception e) {
				e.printStackTrace();
			}

			JSONArray obj = new JSONArray(districtDetailList);

			response.setContentType("application/json");
			response.setHeader("Cache-Control", "no-cache");
			PrintWriter out = response.getWriter();
			out.print(obj);
			out.flush();

			return "success";
		}
	
		
/*		 Added By Dnyaneshwari */	
	    
		public static Map<String, Object> projectUpdateMasterSave(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String projectname = (String) context.get("projectname");
			System.out.println("===============projectname==============="+ projectname);
			String projectnamemr = (String) context.get("projectnamemr");
			System.out.println("===============projectnamemr==============="+ projectnamemr);
			String projectoid = (String) context.get("projectoid");
			System.out.println("===============projectoid==============="+ projectoid);
			String projectstatus = (String) context.get("projectstatus");
			System.out.println("===============projectstatus==============="+ projectstatus);
			String projecttype = (String) context.get("projecttype");
			System.out.println("===============projecttype==============="+ projecttype);


			try {
				System.out.println("===============i am in the try===============");

				String seqId = delegator.getNextSeqId("projectMaster", 1);
				GenericValue log = delegator.makeValue("projectMaster",
						UtilMisc.toMap("seqId", seqId,"projectId",seqId,"projectName", projectname, "projectNameMr", projectnamemr, "project_ownership_id", projectoid,"project_status_id",projectstatus,"project_type_id",projecttype,"status","A"));
				log.create();

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
		
		
		public static Map<String, Object> riverMasterSave(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String riverName = (String) context.get("riverName");
			String riverNameMarathi = (String) context.get("riverNameMarathi");

			try {
				String seqId = delegator.getNextSeqId("riverDetails", 1);
				GenericValue log = delegator.makeValue("riverDetails",
						UtilMisc.toMap("riverId", seqId,"riverName", riverName, "riverNameMarathi", riverNameMarathi));
				log.create();

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
		
		
		

		public static Map<String, Object> basinMasterSave(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			String basinName = (String) context.get("basinName");
			String basinNameMarathi = (String) context.get("basinNameMarathi");

			try {
				String seqId = delegator.getNextSeqId("basinMaster", 1);
				GenericValue log = delegator.makeValue("basinMaster",
						UtilMisc.toMap("basinId", seqId,"basinName", basinName, "basinNameMarathi", basinNameMarathi));
				log.create();

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
		
		public static Map<String, Object> subbasinMasterSave(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			String basinName = (String) context.get("basinName");
			System.out.println("===============basinName==============="+ basinName);

			
			String basinNameMarathi = (String) context.get("basinNameMarathi");
			System.out.println("===============basinNameMarathi==============="+ basinNameMarathi );

			String subbasinName = (String) context.get("subbasinName");
			System.out.println("===============sub Basin Name==============="+ subbasinName);

			try {
				String seqId = delegator.getNextSeqId("subBasinMaster", 1);
				GenericValue log = delegator.makeValue("subBasinMaster",
						UtilMisc.toMap("subBasinId", seqId, "basinNameMarathi", basinNameMarathi,"basinName",subbasinName,"basinId",basinName));
				log.create();

			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}

	    //  Added by Madhavi for Update Content Capacity 
		public synchronized static Map<String, Object> UpdateDamContentCapacity(DispatchContext dctx, Map<String, Object> context)
				throws IOException, ParseException {

			LocalDispatcher dispatcher = dctx.getDispatcher();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			Map<String, Object> result = ServiceUtil.returnSuccess();
			Locale locale = (Locale) context.get("locale");
			GenericValue userLogin = (GenericValue) context.get("userLogin");
			
			ByteBuffer byteBufferValue = (ByteBuffer) context.get("uploadedFile");
			String fileExtension = (String) context.get("fileExtension");
			String damName = (String) context.get("damName");


			try {

				// Code added for Write Excel file in ofbiz Release
				String outFilePath = null;
				try {

					// Call Run Sync Service uploadFileForImport and uploadFile method
					Map<String, Object> fileUploadMap = dispatcher.runSync("uploadFileServiceForMaster",
							UtilMisc.toMap("byteBufferValue", byteBufferValue, "fileExtension", fileExtension));
					if (UtilValidate.isNotEmpty(fileUploadMap))
						// get saved file path In outFilePath

					outFilePath = (String) fileUploadMap.get("outFilePath");
					
					FileInputStream excelFile = new FileInputStream(new File(outFilePath));
					XSSFWorkbook book = new XSSFWorkbook(excelFile);
					XSSFSheet sheet = book.getSheetAt(0);

					int noOfRows = sheet.getLastRowNum();
					// Code for upload
					// delete existing entry
					int removeDetails;
					removeDetails = delegator.removeByCondition("damContentCapacity",
							EntityCondition.makeCondition("damId", EntityOperator.EQUALS, damName));
					System.out.println("Entry Removed ===================");
					
					
						for (int i = 1; i <= noOfRows; i++) {
						String gross_storage_inmcum = sheet.getRow(i).getCell(0).toString();
						BigDecimal BigDe_gross_storage = new BigDecimal(gross_storage_inmcum); 

						String rl_inm= sheet.getRow(i).getCell(1).toString();
						BigDecimal BigDe_rl_inm = new BigDecimal(rl_inm);
						
						String water_spread_insqkm = sheet.getRow(i).getCell(2).toString();
						BigDecimal BigDe_water_spread_insqkm = new BigDecimal(water_spread_insqkm);
						
					    String storage_level_type_id = sheet.getRow(i).getCell(3).toString();
					  
					   	/*StringBuffer sb= new StringBuffer(dam_id);  
						sb=sb.deleteCharAt(sb.length()-1);
						sb=sb.deleteCharAt(sb.length()-1);
						String damIdN = sb.toString();*/
						System.out.println("======noOfRows===="+noOfRows);
						
					   	if (UtilValidate.isNotEmpty(damName)) {
							String capacityId = delegator.getNextSeqId("damContentCapacity", 1);

							GenericValue Capacitydetail = delegator.makeValue("damContentCapacity",
									UtilMisc.toMap("capacityId", capacityId, "grossStorageInMcum", BigDe_gross_storage, "rlInM",BigDe_rl_inm
											, "waterSpreadInSqkm", BigDe_water_spread_insqkm, "damId", damName, "storageLevelTypeId", storage_level_type_id));

							Capacitydetail.create();
						}
					
					}

					book.close();
					// End
				       
				} catch (GenericServiceException e1) {

					e1.printStackTrace();
				}

			// End
			} 
			 
			catch (Exception e) {
				Debug.log("Exception occured :LKHLLHJELLO");
				e.printStackTrace();
			}
			return result;
		}
// End	
		public static Map<String, Object> ViewDamContentXLS(DispatchContext dctx, Map<String, ? extends Object> context) {
			Map<String, Object> result = ServiceUtil.returnSuccess();
			GenericDelegator delegator = (GenericDelegator) dctx.getDelegator();
			LocalDispatcher dispatcher = dctx.getDispatcher();

			try {

			XSSFWorkbook workbooka = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbooka.createSheet("DamStorage Detail");
			XSSFRow rowA = spreadsheet.createRow(0);
			XSSFRow row = spreadsheet.createRow(0);
			XSSFRow rowB = spreadsheet.createRow(8);

			// Setting Font Properties for row
			  XSSFFont font = workbooka.createFont();
			 
			  font.setFontHeightInPoints((short)11);
			  font.setFontName("Times New Roman");
			  font.setBold(true);

			  XSSFCell cell;
			  XSSFCellStyle style1 = workbooka.createCellStyle();
			  style1.setFont(font);

			//Setting Font Properties for columns
			  XSSFFont font1 = workbooka.createFont();

			  font1.setFontHeightInPoints((short)11);
			  font1.setFontName("Times New Roman");
			  font1.setBold(false);

			/*  XSSFCell cell1;
			  XSSFCellStyle style2 = workbooka.createCellStyle();
			  style2.setFont(font1);*/

			  int columnIndex = 0; // Column A
		      short bgColorIndex = IndexedColors.LIGHT_YELLOW.getIndex();
		      
		        CellStyle style = workbooka.createCellStyle();
		        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		        style.setFillForegroundColor(bgColorIndex);
		        style.setBorderTop(BorderStyle.THIN);
		        style.setBorderBottom(BorderStyle.THIN);
		        style.setBorderLeft(BorderStyle.THIN);
		        style.setBorderRight(BorderStyle.THIN);


			// Column Heading Name
			  cell = rowA.createCell(30);
				cell.setCellValue("");

				cell = row.createCell(0);
				cell.setCellStyle(style);
				cell.setCellValue("timepass");

				cell = row.createCell(1);
				cell.setCellStyle(style);
				cell.setCellValue("timepass");

				cell = row.createCell(2);
				cell.setCellStyle(style);
				cell.setCellValue("t ");

				cell = row.createCell(3);
				cell.setCellStyle(style);
				cell.setCellValue("storage_level_type_id");
				
				  
				
				  SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
			        String currentDate = dateFormat.format(new Date());

			        String fileName = "Sample_DamContentCapacity_" + currentDate + ".xls";
			        String filePath = "themes/rainbowstone/webapp/rainbowstone/pravah/Excel/" + fileName;

			        // Check if the file exists
			     
			} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			}
			return result;

		}	
		
		public static Map<String, Object> schedulerLatestReport(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");

			try {
				List<EntityCondition> andExprA = FastList.newInstance();
				EntityCondition mainCondA = null;
				andExprA.add(EntityCondition.makeCondition("statusOfActive", EntityOperator.EQUALS, "A"));
				mainCondA = EntityCondition.makeCondition(andExprA, EntityOperator.AND);

				List<GenericValue> damStorageList = FastList.newInstance();
				damStorageList = delegator.findList("damStorageDetails", mainCondA, null, null, null, false);
				// delete existing entry
				int removeDetails;
				removeDetails = delegator.removeByCondition("damStorageDetailsLatestReportFreez",
						EntityCondition.makeCondition("damId", EntityOperator.NOT_EQUAL, null));
				System.out.println("Entry Removed ===================");		

				//Current Date
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy"); 
				//Current Date added by shubham
				Date Livedate = new Date();
				String reportDate= sdf1.format(Livedate);
				System.out.println("UI Date===dateto4===1 strLiveDate == "+reportDate);
				
				// delete existing entry
				int removeDetails2;
				removeDetails2 = delegator.removeByCondition("LatestReportFreezHistoryDetails",
						EntityCondition.makeCondition("reportDate", EntityOperator.EQUALS, reportDate));
				
				for (int i = 0; i < damStorageList.size(); i++)
				{
					String damStroageId = damStorageList.get(i).getString("damStroageId");
					String damId = damStorageList.get(i).getString("damId");
					java.sql.Timestamp rainFallDateTime = damStorageList.get(i).getTimestamp("rainFallDateTime");//date-time
					java.sql.Date rainFallDate = damStorageList.get(i).getDate("rainFallDate");// date
					String rainFallTime = damStorageList.get(i).getString("rainFallTime");
					String rainFall = damStorageList.get(i).getString("rainFall");
					java.sql.Timestamp lakeLevelDateTime = damStorageList.get(i).getTimestamp("lakeLevelDateTime");//date-time
					java.sql.Date levelDate = damStorageList.get(i).getDate("levelDate");//date
					String levelTime = damStorageList.get(i).getString("levelTime");
					String level = damStorageList.get(i).getString("level");
					java.sql.Timestamp evaporationDateTime = damStorageList.get(i).getTimestamp("evaporationDateTime");//date-time
					java.sql.Date evaporationDate = damStorageList.get(i).getDate("evaporationDate");//date
					String evaporationTime = damStorageList.get(i).getString("evaporationTime");
					String evaporation = damStorageList.get(i).getString("evaporation");
					java.sql.Date drinkingDate = damStorageList.get(i).getDate("drinkingDate");//date
					
					String drinkingUses = damStorageList.get(i).getString("drinkingUses");
					String irrigationUses = damStorageList.get(i).getString("irrigationUses");
					java.sql.Date industrialDate = damStorageList.get(i).getDate("industrialDate");// date
					String industrialMonth = damStorageList.get(i).getString("industrialMonth");
					String industrialYear = damStorageList.get(i).getString("industrialYear");
					String industrialUses = damStorageList.get(i).getString("industrialUses");
					String status = damStorageList.get(i).getString("status");
					String rainfallEnterBy = damStorageList.get(i).getString("rainfallEnterBy");
					String rainfallByofficeId = damStorageList.get(i).getString("rainfallByofficeId");
					String lakeLevelEnterBy = damStorageList.get(i).getString("lakeLevelEnterBy");
					String lakeLevelByofficeId = damStorageList.get(i).getString("lakeLevelByofficeId");
					String evaporationEnterBy = damStorageList.get(i).getString("evaporationEnterBy");
					String evaporationByofficeId = damStorageList.get(i).getString("evaporationByofficeId");
					String drinkingEnterBy = damStorageList.get(i).getString("drinkingEnterBy");
					String drinkingByofficeId = damStorageList.get(i).getString("drinkingByofficeId");
					String industrialEnterBy = damStorageList.get(i).getString("industrialEnterBy");
					String industrialByofficeId = damStorageList.get(i).getString("industrialByofficeId");
					java.sql.Date rainfallUpdateDate = damStorageList.get(i).getDate("rainfallUpdateDate");//date
					java.sql.Date lakeLevelUpdateDate = damStorageList.get(i).getDate("lakeLevelUpdateDate");// date
					java.sql.Date evaporationUpdateDate = damStorageList.get(i).getDate("evaporationUpdateDate");//date
					java.sql.Date drinkingUpdateDate = damStorageList.get(i).getDate("drinkingUpdateDate");
					java.sql.Date industrialUpdateDate = damStorageList.get(i).getDate("industrialUpdateDate");
					java.sql.Date dischargeUpdateDate = damStorageList.get(i).getDate("dischargeUpdateDate");//date
					BigDecimal liveStorage = BigDecimal.ZERO;
					liveStorage = damStorageList.get(i).getBigDecimal("liveStorage");//currency-precise
					BigDecimal grossStorage = BigDecimal.ZERO;
					grossStorage = damStorageList.get(i).getBigDecimal("grossStorage");//currency-precise
					String lakeLevelEntrySource = damStorageList.get(i).getString("lakeLevelEntrySource");
					java.sql.Timestamp dischargeDateTime= damStorageList.get(i).getTimestamp("dischargeDateTime");
					java.sql.Date dischargeDate = damStorageList.get(i).getDate("dischargeDate");
					String dischargeTime = damStorageList.get(i).getString("dischargeTime");
					String discharge = damStorageList.get(i).getString("discharge");
					String typeOfDischarge = damStorageList.get(i).getString("typeOfDischarge");
					String dischargebyofficeId = damStorageList.get(i).getString("dischargebyofficeId");
					String dischargebyuserLoginId = damStorageList.get(i).getString("dischargebyuserLoginId");
					String lakeLevelDataEnterBy = damStorageList.get(i).getString("lakeLevelDataEnterBy");
					String rainfallEntrySource = damStorageList.get(i).getString("rainfallEntrySource");
					String rainfallDataEnterBy = damStorageList.get(i).getString("rainfallDataEnterBy");
					String evaporationEntrySource = damStorageList.get(i).getString("evaporationEntrySource");
					String evaporationDataEnterBy = damStorageList.get(i).getString("evaporationDataEnterBy");
					String dischargeDataEnterBy = damStorageList.get(i).getString("dischargeDataEnterBy");
					String dischargeEntrySource = damStorageList.get(i).getString("dischargeEntrySource");
					java.sql.Date LastYlevelDate = damStorageList.get(i).getDate("LastYlevelDate");
					String LastYlevelTime = damStorageList.get(i).getString("LastYlevelTime");
					String lastyearLevel = damStorageList.get(i).getString("lastyearLevel");
					BigDecimal lastyearGrossv = BigDecimal.ZERO;
					lastyearGrossv = damStorageList.get(i).getBigDecimal("lastyearGrossv");
					BigDecimal lastyearlivev = BigDecimal.ZERO;
					lastyearlivev = damStorageList.get(i).getBigDecimal("lastyearlivev");
					String levelUpdatedTime = damStorageList.get(i).getString("levelUpdatedTime");
			        
					GenericValue saveInNewLatestReportCurrent = delegator.makeValue("damStorageDetailsLatestReportFreez",
							UtilMisc.toMap("damStroageId", damStroageId,"damId",damId,"rainFallDate",rainFallDate,"rainFallDateTime",rainFallDateTime,
									"rainFallTime",rainFallTime,"rainFall",rainFall,"lakeLevelDateTime",lakeLevelDateTime,"levelDate",levelDate,
									"levelTime",levelTime,"level",level,"evaporationDateTime",evaporationDateTime,"evaporationDate",evaporationDate,
									"evaporationTime",evaporationTime,"evaporation",evaporation,"drinkingDate",drinkingDate,"drinkingUses",drinkingUses,
									"irrigationUses",irrigationUses,"industrialDate",industrialDate,"industrialMonth",industrialMonth,"industrialYear",industrialYear,
									"industrialUses",industrialUses,"status",status,"rainfallEnterBy",rainfallEnterBy,"rainfallByofficeId",rainfallByofficeId,
									"rainfallByofficeId",rainfallByofficeId,"lakeLevelEnterBy",lakeLevelEnterBy,"lakeLevelByofficeId",lakeLevelByofficeId,
									"evaporationEnterBy",evaporationEnterBy,"evaporationByofficeId",evaporationByofficeId,"drinkingEnterBy",drinkingEnterBy,"drinkingByofficeId",drinkingByofficeId,
									"industrialEnterBy",industrialEnterBy,"industrialByofficeId",industrialByofficeId,"rainfallUpdateDate",rainfallUpdateDate,
									"lakeLevelUpdateDate",lakeLevelUpdateDate,"evaporationUpdateDate",evaporationUpdateDate,"drinkingUpdateDate",drinkingUpdateDate,
									"industrialUpdateDate",industrialUpdateDate,"dischargeUpdateDate",dischargeUpdateDate,"liveStorage",liveStorage,"grossStorage",grossStorage,
									"lakeLevelEntrySource",lakeLevelEntrySource,"dischargeDateTime",dischargeDateTime,"dischargeDate",dischargeDate,"dischargeTime",dischargeTime,
									"discharge",discharge,"typeOfDischarge",typeOfDischarge,"dischargebyofficeId",dischargebyofficeId,"dischargebyuserLoginId",dischargebyuserLoginId,
									"lakeLevelDataEnterBy",lakeLevelDataEnterBy,"rainfallEntrySource",rainfallEntrySource,"rainfallDataEnterBy",rainfallDataEnterBy,
									"evaporationEntrySource",evaporationEntrySource,"evaporationDataEnterBy",evaporationDataEnterBy,"dischargeDataEnterBy",dischargeDataEnterBy,
									"dischargeEntrySource",dischargeEntrySource,"LastYlevelDate",LastYlevelDate,"LastYlevelTime",LastYlevelTime,"lastyearLevel",lastyearLevel,
									"lastyearGrossv",lastyearGrossv,"lastyearlivev",lastyearlivev,"levelUpdatedTime",levelUpdatedTime));

					saveInNewLatestReportCurrent.create();
					System.out.println("==============Entry Save===="+i);
					
					// For Old Report
					String seqId = delegator.getNextSeqId("LatestReportFreezHistoryDetails",1);
					GenericValue saveInNewLatestReportCurrent2 = delegator.makeValue("LatestReportFreezHistoryDetails",
							UtilMisc.toMap("seqId",seqId,"reportDate",reportDate,"damStroageId", damStroageId,"damId",damId,"rainFallDate",rainFallDate,"rainFallDateTime",rainFallDateTime,
									"rainFallTime",rainFallTime,"rainFall",rainFall,"lakeLevelDateTime",lakeLevelDateTime,"levelDate",levelDate,
									"levelTime",levelTime,"level",level,"evaporationDateTime",evaporationDateTime,"evaporationDate",evaporationDate,
									"evaporationTime",evaporationTime,"evaporation",evaporation,"drinkingDate",drinkingDate,"drinkingUses",drinkingUses,
									"irrigationUses",irrigationUses,"industrialDate",industrialDate,"industrialMonth",industrialMonth,"industrialYear",industrialYear,
									"industrialUses",industrialUses,"status",status,"rainfallEnterBy",rainfallEnterBy,"rainfallByofficeId",rainfallByofficeId,
									"rainfallByofficeId",rainfallByofficeId,"lakeLevelEnterBy",lakeLevelEnterBy,"lakeLevelByofficeId",lakeLevelByofficeId,
									"evaporationEnterBy",evaporationEnterBy,"evaporationByofficeId",evaporationByofficeId,"drinkingEnterBy",drinkingEnterBy,"drinkingByofficeId",drinkingByofficeId,
									"industrialEnterBy",industrialEnterBy,"industrialByofficeId",industrialByofficeId,"rainfallUpdateDate",rainfallUpdateDate,
									"lakeLevelUpdateDate",lakeLevelUpdateDate,"evaporationUpdateDate",evaporationUpdateDate,"drinkingUpdateDate",drinkingUpdateDate,
									"industrialUpdateDate",industrialUpdateDate,"dischargeUpdateDate",dischargeUpdateDate,"liveStorage",liveStorage,"grossStorage",grossStorage,
									"lakeLevelEntrySource",lakeLevelEntrySource,"dischargeDateTime",dischargeDateTime,"dischargeDate",dischargeDate,"dischargeTime",dischargeTime,
									"discharge",discharge,"typeOfDischarge",typeOfDischarge,"dischargebyofficeId",dischargebyofficeId,"dischargebyuserLoginId",dischargebyuserLoginId,
									"lakeLevelDataEnterBy",lakeLevelDataEnterBy,"rainfallEntrySource",rainfallEntrySource,"rainfallDataEnterBy",rainfallDataEnterBy,
									"evaporationEntrySource",evaporationEntrySource,"evaporationDataEnterBy",evaporationDataEnterBy,"dischargeDataEnterBy",dischargeDataEnterBy,
									"dischargeEntrySource",dischargeEntrySource,"LastYlevelDate",LastYlevelDate,"LastYlevelTime",LastYlevelTime,"lastyearLevel",lastyearLevel,
									"lastyearGrossv",lastyearGrossv,"lastyearlivev",lastyearlivev,"levelUpdatedTime",levelUpdatedTime));

						saveInNewLatestReportCurrent2.create();
					
										System.out.println("==============Entry Save===="+i);
				}
			} catch (Exception e) {
				System.out.print("error==============" + e);
			}
			return successResult;
		}
	
		
		
		public static Map<String, Object> updateAssetStatusD(DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			String structureId = (String) context.get("assId");
			String status = (String) context.get("status");
			String activestatus = (String) context.get("activestatus");
			Map structureMaster = null;
			System.out.println("===structureId=====" + structureId);
			System.out.println("===status=====" + status);
			System.out.println("===activestatus=====" + activestatus);


			try {
				System.out.println("===try=====");

				if (UtilValidate.isNotEmpty(structureId)) {
					System.out.println("===if=====");

					Map mapToSave = UtilMisc.toMap("status", "D");
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, structureId));
					System.out.println("updated++++++++++++++++++&&&&&&&&&");
					
					Map mapToSave1 = UtilMisc.toMap("statusOfActive", "D");
					int damCheckListDetails1 = delegator.storeByCondition("damStorageDetails", mapToSave1,
							EntityCondition.makeCondition("damId", EntityOperator.EQUALS, structureId));
					System.out.println("damStorageDetails D++++++++++++++++++&&&&&&&&&");


				}
				}
			 catch (Exception e) {
				System.out.println("error======================" + e);
			}

			return successResult;
		}	

		public static Map<String, Object> updateAssetStatusA (DispatchContext ctx, Map<String, ? extends Object> context) {
			Delegator delegator = ctx.getDelegator();
			LocalDispatcher dispatcher = ctx.getDispatcher();
			Locale locale = (Locale) context.get("locale");
			Map<String, Object> successResult = ServiceUtil.returnSuccess();

			GenericValue userLogin = (GenericValue) context.get("userLogin");
			String structureId = (String) context.get("assId");
			String status = (String) context.get("status");
			String activestatus = (String) context.get("activestatus");
			Map structureMaster = null;
			System.out.println("===structureId=====" + structureId);
			System.out.println("===status=====" + status);
			System.out.println("===activestatus=====" + activestatus);


			try {
				System.out.println("===try=====");

				if (UtilValidate.isNotEmpty(structureId)) {
					System.out.println("===if=====");

					Map mapToSave = UtilMisc.toMap("status", "A");
					int damCheckListDetails = delegator.storeByCondition("structureMaster", mapToSave,
							EntityCondition.makeCondition("structureId", EntityOperator.EQUALS, structureId));
					System.out.println("updated++++++++++++++++++&&&&&&&&&");
					
					Map mapToSave3 = UtilMisc.toMap("statusOfActive", "A");
					int damCheckListDetails2 = delegator.storeByCondition("damStorageDetails", mapToSave3,
							EntityCondition.makeCondition("damId", EntityOperator.EQUALS, structureId));
					System.out.println("damStorageDetails A++++++++++++++++++&&&&&&&&&");

				}
				}
			 catch (Exception e) {
				System.out.println("error======================" + e);
			}

			return successResult;
		}	
		
		public static Map<String, Object> HelloThere(DispatchContext ctx, Map<String, ? extends Object> context) throws GenericServiceException {
		    Delegator delegator = ctx.getDelegator();
		    LocalDispatcher dispatcher = ctx.getDispatcher();
		    Locale locale = (Locale) context.get("locale");
		    Map<String, Object> successResult = ServiceUtil.returnSuccess();

		    System.out.println("sendEmail called**************************");
		    String to = "rukmin.mspl@gmail.com";
		    String cc =  "shubham.malviya@msplpune.com"; 
		  
		    String from = "as.msplpune@gmail.com";
		    String password = "hpyvbudvwowweihx";
		    String host = "smtp.gmail.com";
		    String port = "587";
		    Properties properties = System.getProperties();
		    properties.setProperty("mail.smtp.auth", "true");
		    properties.setProperty("mail.smtp.host", host);
		    properties.setProperty("mail.smtp.starttls.enable", "true");
		    properties.setProperty("mail.smtp.port", port);

		    Session session = Session.getDefaultInstance(properties, new Authenticator() {
		        @Override
		        protected PasswordAuthentication getPasswordAuthentication() {
		            return new PasswordAuthentication(from, password);
		        }
		    });

		    try {
		        MimeMessage message = new MimeMessage(session);
		        message.setFrom(new InternetAddress(from));
		        message.addRecipient(RecipientType.TO, new InternetAddress(to));
		        
		
		        if (cc != null && !cc.isEmpty()) {
		            message.addRecipient(RecipientType.CC, new InternetAddress(cc));
		        }

		      
		        
		        message.setSubject("What's up!!!");
		        message.setText("hey... this for testing a java function");
		        MimeBodyPart messageBodyPart = new MimeBodyPart();
		        String filename = "F:\\webpage_content.txt";
		        FileDataSource source = new FileDataSource(filename);
		        messageBodyPart.setDataHandler(new DataHandler(source));
		        messageBodyPart.setFileName(filename);

		        Multipart multipart = new MimeMultipart();
		        multipart.addBodyPart(messageBodyPart);

		  
		        message.setContent(multipart);

		        Transport.send(message);
		        System.out.println("Message sent successfully!");
		    } catch (MessagingException mex) {
		        mex.printStackTrace();
		    }

		    return successResult;
		}


		
		
		
		
		
		
public static void downloadExcelFile(HttpServletRequest request, HttpServletResponse response) throws IOException, InterruptedException {
    response.setContentType("application/vnd.ms-excel");

    // Create a workbook object from the Excel file
    String filePath = "F:\\PRAVAH_24JUNE\\pravah2\\branches\\themes\\rainbowstone\\webapp\\rainbowstone\\pravah\\Excel\\viewDamStorage.xls"; // Updated file extension to xlsx for Office 2007+ XML format
    File file = new File(filePath);
    if (file.exists()) {

        Thread.sleep(2000);
        try (FileInputStream fis = new FileInputStream(file);
             OutputStream out = response.getOutputStream()) {

            Workbook workbook = new XSSFWorkbook(fis); // Load data from the existing Excel file

            Sheet sheet = workbook.getSheetAt(0); // Assuming you want to read from the first sheet
            Row row = sheet.getRow(0); // 0th row (0-based index)

            // Read the column name from the 61st cell (Column AF, 32-based index)
            Cell cell = row.getCell(61);
            String columnName = "";
            if (cell != null) {
                columnName = cell.getStringCellValue().trim(); // Assuming the cell contains the column name
                cell.setCellValue(""); // Delete the cell value
            }

            // Generate the new file name with the column name and timestamp
            String newFileName = "viewDamStorage_" + columnName + ".xlsx";

            // Set the "Content-Disposition" header to prompt the user to save the file with the new name
            response.setHeader("Content-Disposition", "attachment; filename=\"" + newFileName + "\"");

            // Set custom header to send the column name in the response
            response.setHeader("Column-Name", columnName);

            // Write the modified Excel file to the response output stream
            workbook.write(out);
        } catch (IOException e) {
            // Handle any exception that may occur during file reading or writing
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    } else {
        response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    }
}
		public static void getDistrict(HttpServletRequest request, HttpServletResponse response)
				throws IOException, GenericEntityException {
			GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

			String regionId = request.getParameter("regionId");

			System.out.println("===============regionId" + regionId);

			List<EntityCondition> andExprs2 = FastList.newInstance();
			EntityCondition mainCond2 = null;
			List<GenericValue> districtMaster = FastList.newInstance();

			try {
				andExprs2.add(EntityCondition.makeCondition("revenueregion", EntityOperator.EQUALS, regionId));
				mainCond2 = EntityCondition.makeCondition(andExprs2, EntityOperator.AND);

				districtMaster = delegator.findList("viewStructureDetailsNew", mainCond2, null, null, null, false);

			} catch (Exception e) {
				e.printStackTrace();
			}

			JSONArray obj = new JSONArray(districtMaster);

			response.setContentType("application/json");
			response.setHeader("Cache-Control", "no-cache");
			PrintWriter out = response.getWriter();
			out.print(obj);
			out.flush();

			
		}
		public static String getVillage(HttpServletRequest request, HttpServletResponse response)
				throws IOException, GenericEntityException {

			GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

			String talukId = (request.getParameter("talukId"));

			System.out.println("==============talukId" + talukId);

			

			JSONArray obj = new JSONArray();
			obj.put(talukId);

			response.setContentType("application/json");
			response.setHeader("Cache-Control", "no-cache");
			PrintWriter out = response.getWriter();
			out.print(obj);
			out.flush();

			return "success";
		}
		
		
	
		
}